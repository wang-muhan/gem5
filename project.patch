diff --git a/.gitignore b/.gitignore
index 229a0d5ae9..daae3eccbe 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,3 +32,5 @@ configs/example/memcheck.cfg
 configs/dram/lowp_sweep.cfg
 .pyenv
 .vscode
+*.txt
+*.sh
\ No newline at end of file
diff --git a/Experiment/Experiment1/plot1.py b/Experiment/Experiment1/plot1.py
new file mode 100644
index 0000000000..cdda39208c
--- /dev/null
+++ b/Experiment/Experiment1/plot1.py
@@ -0,0 +1,108 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))
+    else:
+        return None
+
+synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
+num_cpus = [4, 16, 64, 256]
+inj_rates = [0.1, 0.2, 0.5, 1.0]
+latency = ({},{},{})
+
+path = "Experiment/Experiment1/result.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[10*cnt+2-1])
+                print(f"{synthetic}_DOR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[10*cnt+2-1] == f"{synthetic}_DOR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[10*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+    
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[642+9*cnt-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[642+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[642+9*cnt-1])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[642+9*cnt-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
+                print(latency[2][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+fig, axs = plt.subplots(4, 4, figsize=(16, 16))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = axs[i, j]  # 选择正确的子图
+        for method in range(3):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 0:
+                lines.append(line)
+                if method == 0:
+                    label = "Hypercube_DOR"
+                elif method == 1:
+                    label = "Hypercube_*-channel"
+                elif method == 2:
+                    label = "Mesh_XY"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3)
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = axs[i, j]  # 选择正确的子图
+#         for method in range(3):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             if method == 0:
+#                 label = "Hypercube_DOR"
+#             elif method == 1:
+#                 label = "Hypercube_*-channel"
+#             elif method == 2:
+#                 label = "Mesh_XY"
+#             ax.plot(inj_rates, latencies, marker='o', label=label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+#         ax.legend()
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/Experiment1/ex1_fig1.png")
+
diff --git a/Experiment/Experiment1/plot2.py b/Experiment/Experiment1/plot2.py
new file mode 100644
index 0000000000..71d3f80f1d
--- /dev/null
+++ b/Experiment/Experiment1/plot2.py
@@ -0,0 +1,111 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))
+    else:
+        return None
+
+# synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
+synthetics = ["bit_complement"]
+num_cpus = [4, 16, 64, 256]
+inj_rates = [0.1, 0.2, 0.5, 1.0]
+vcs_per_vnets = [4,8,12,16]
+latency = ({},{},{})
+
+path = "Experiment/Experiment1/result.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                for vcs_per_vnet in vcs_per_vnets:
+                    print(lines[10*cnt+2-1])
+                    print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                    # breakpoint()
+                    assert lines[10*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                    latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[10*cnt+8-1])
+                    print(latency[0][(synthetic,num_cpu,inj_rate)])
+                    cnt+=1
+    
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[642+9*cnt-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[642+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[642+9*cnt-1])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[642+9*cnt-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
+                print(latency[2][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+fig, axs = plt.subplots(4, 4, figsize=(16, 16))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = axs[i, j]  # 选择正确的子图
+        for method in range(3):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 0:
+                lines.append(line)
+                if method == 0:
+                    label = "Hypercube_DOR"
+                elif method == 1:
+                    label = "Hypercube_*-channel"
+                elif method == 2:
+                    label = "Mesh_XY"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3)
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = axs[i, j]  # 选择正确的子图
+#         for method in range(3):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             if method == 0:
+#                 label = "Hypercube_DOR"
+#             elif method == 1:
+#                 label = "Hypercube_*-channel"
+#             elif method == 2:
+#                 label = "Mesh_XY"
+#             ax.plot(inj_rates, latencies, marker='o', label=label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+#         ax.legend()
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/Experiment1/ex1_fig1.png")
+
diff --git a/Experiment/Experiment1/plot3.py b/Experiment/Experiment1/plot3.py
new file mode 100644
index 0000000000..ce3c3b33b0
--- /dev/null
+++ b/Experiment/Experiment1/plot3.py
@@ -0,0 +1,143 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))/1000
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpus = [4, 16, 64, 256]
+inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
+latency = ({},{},{})
+
+path = "Experiment/Experiment1/result_new_hypercube_new.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                print(9*cnt+2-1)
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+path = "Experiment/Experiment1/result_new_mesh.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
+# fig.subplots_adjust(hspace=0.8, wspace=0.4)
+
+# lines = []
+# labels = []
+# num_cpus = [16,64,256] # 4不要了
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = axs[i, j]  # 选择正确的子图
+#         for method in range(2):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+#             # 只在第一个子图时记录句柄和标签
+#             if i == 0 and j == 1:
+#                 lines.append(line)
+#                 if method == 0:
+#                     label = "Hypercube_*-channel"
+#                 elif method == 1:
+#                     label = "Mesh_XY"
+#                 labels.append(label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+
+# # 在整个图中添加一个全局图例，并将图例放在图像之外
+# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# # 显示图像
+# plt.show()
+# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
+
+import matplotlib.pyplot as plt
+import matplotlib.gridspec as gridspec
+import matplotlib.lines as mlines
+
+fig = plt.figure(figsize=(18, 18))
+# 定义gridspec布局
+outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
+
+# 创建左右两部分
+left_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
+right_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
+
+lines = []
+labels = []
+num_cpus = [16, 64, 256]  # 4不要了
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics[:4]):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
+        for method in range(2):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 1:
+                lines.append(line)
+                if method == 0:
+                    label = "Hypercube_*-channel"
+                elif method == 1:
+                    label = "Mesh_XY"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 右侧部分
+for i, synthetic in enumerate(synthetics[4:]):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = fig.add_subplot(right_grid[i, j])
+        for method in range(2):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 在整个图中添加一个全局图例，并将图例放在图像下方
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# # 在中间绘制虚线分割
+# fig.text(0.5, 0.5, '', ha='center', va='center')
+# plt.axvline(x=0.495, color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
+
+# 手动绘制虚线分割线
+line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
+fig.add_artist(line)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
diff --git a/Experiment/Experiment3/plot.py b/Experiment/Experiment3/plot.py
new file mode 100644
index 0000000000..d4d6bd285c
--- /dev/null
+++ b/Experiment/Experiment3/plot.py
@@ -0,0 +1,85 @@
+import matplotlib.pyplot as plt
+import numpy as np
+import re
+
+def extract_reception_rate(line):
+    match = re.search(r'reception_rate\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))
+    else:
+        return None
+
+# synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
+synthetics = ["bit_complement","shuffle","uniform_random"]
+num_cpu = 64
+# inj_rates = np.arange(0.05, 1.05, 0.05).tolist()
+inj_rates = ["0.05","0.1","0.15","0.2","0.25",'0.3','0.35','0.4','0.45','0.5','0.55','0.6','0.65','0.7','0.75','0.8','0.85','0.9','0.95','1.0']
+latencies = [1,2,4]
+
+reception_rate = ({},{},{})
+
+path = "Experiment/Experiment3/result/result2_largeth.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for latency in latencies:
+            for inj_rate in inj_rates:
+                print(lines[10*cnt+2-1])
+                print(f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[10*cnt+2-1] == f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
+                reception_rate[0][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[10*cnt+10-1])
+                print(reception_rate[0][(synthetic,latency,inj_rate)])
+                cnt+=1
+    
+    cnt = 0
+    for synthetic in synthetics:
+        for latency in latencies:
+            for inj_rate in inj_rates:
+                print(lines[10*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[1802+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
+                reception_rate[1][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[1810+9*cnt-1])
+                print(reception_rate[1][(synthetic,latency,inj_rate)])
+                cnt+=1
+
+fig, axs = plt.subplots(3, 3, figsize=(16, 16))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    for j, latency in enumerate(latencies):
+        ax = axs[i, j]  # 选择正确的子图
+        # for method in [range(2)]:
+        for method in [1,0]: # 倒着颜色比较对
+            reception_rate_ = [reception_rate[method].get((synthetic, latency, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, reception_rate_, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 0:
+                lines.append(line)
+                if method == 0:
+                    label = "Fully Adapt"
+                elif method == 1:
+                    label = "*-channel"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, link/router latency = {latency}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Reception Rate')
+        ax.set_ylim(0, 1.05)
+        # 设置横轴刻度，只显示第4,8,12,16,20个数据点
+        selected_ticks = inj_rates[3:20:4]  # 选择第4,8,12,16,20个点
+        ax.set_xticks(selected_ticks)
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/Experiment3/figs/fig2.png")
+
diff --git a/Experiment/New_Experiment/Additional/plot.py b/Experiment/New_Experiment/Additional/plot.py
new file mode 100644
index 0000000000..65a8dc3cec
--- /dev/null
+++ b/Experiment/New_Experiment/Additional/plot.py
@@ -0,0 +1,103 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))/2
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpus = [4, 16, 64, 256]
+inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
+latency = ({},{},{})
+
+path = "Experiment/New_Experiment/Additional/result.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                print(9*cnt+2-1)
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+import matplotlib.pyplot as plt
+import matplotlib.gridspec as gridspec
+import matplotlib.lines as mlines
+
+fig = plt.figure(figsize=(18, 18))
+# 定义gridspec布局
+outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
+
+# 创建左右两部分
+left_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
+right_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
+
+lines = []
+labels = []
+num_cpus = [16, 64, 256]  # 4不要了
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics[:4]):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
+        for method in range(2):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 1:
+                lines.append(line)
+                if method == 0:
+                    label = "Hypercube_*-channel"
+                elif method == 1:
+                    label = "Mesh_XY"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 右侧部分
+for i, synthetic in enumerate(synthetics[4:]):
+    for j, num_cpu in enumerate(num_cpus):
+        ax = fig.add_subplot(right_grid[i, j])
+        for method in range(2):
+            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+            ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        
+        ax.set_title(f'{synthetic}, CPU={num_cpu}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Latency')
+
+# 在整个图中添加一个全局图例，并将图例放在图像下方
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# 手动绘制虚线分割线
+line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
+fig.add_artist(line)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment1/figs/additional.png", bbox_inches='tight')
diff --git a/Experiment/New_Experiment/Experiment1/plot.py b/Experiment/New_Experiment/Experiment1/plot.py
new file mode 100644
index 0000000000..e1ef35e063
--- /dev/null
+++ b/Experiment/New_Experiment/Experiment1/plot.py
@@ -0,0 +1,221 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))/2# 2是tick和cycle的比例
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpus = [4, 16, 64]
+inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
+latency = ({},{},{})
+
+path = "Experiment/New_Experiment/Experiment1/result1.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                print(9*cnt+2-1)
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    num_cpus = [16, 64]
+    for num_cpu in num_cpus:
+        for synthetic in synthetics:
+            for inj_rate in inj_rates:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[2][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
+# fig.subplots_adjust(hspace=0.8, wspace=0.4)
+
+# lines = []
+# labels = []
+# num_cpus = [16,64,256] # 4不要了
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = axs[i, j]  # 选择正确的子图
+#         for method in range(2):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+#             # 只在第一个子图时记录句柄和标签
+#             if i == 0 and j == 1:
+#                 lines.append(line)
+#                 if method == 0:
+#                     label = "Hypercube_*-channel"
+#                 elif method == 1:
+#                     label = "Mesh_XY"
+#                 labels.append(label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+
+# # 在整个图中添加一个全局图例，并将图例放在图像之外
+# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# # 显示图像
+# plt.show()
+# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
+
+# import matplotlib.pyplot as plt
+# import matplotlib.gridspec as gridspec
+# import matplotlib.lines as mlines
+
+# fig = plt.figure(figsize=(18, 18))
+# # 定义gridspec布局
+# outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
+
+# # 创建左右两部分
+# left_grid = gridspec.GridSpecFromSubplotSpec(4, 2, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
+# right_grid = gridspec.GridSpecFromSubplotSpec(4, 2, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
+
+# lines = []
+# labels = []
+# num_cpus = [16, 64]  # 4不要了
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics[:4]):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
+#         for method in range(2):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+#             # 只在第一个子图时记录句柄和标签
+#             if i == 0 and j == 1:
+#                 lines.append(line)
+#                 if method == 0:
+#                     label = "Hypercube_*-channel"
+#                 elif method == 1:
+#                     label = "Mesh_XY"
+#                 labels.append(label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+
+# # 右侧部分
+# for i, synthetic in enumerate(synthetics[4:]):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = fig.add_subplot(right_grid[i, j])
+#         for method in range(2):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+
+# # 在整个图中添加一个全局图例，并将图例放在图像下方
+# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# # # 在中间绘制虚线分割
+# # fig.text(0.5, 0.5, '', ha='center', va='center')
+# # plt.axvline(x=0.495, color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
+
+# # 手动绘制虚线分割线
+# line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
+# fig.add_artist(line)
+
+# # 显示图像
+# plt.show()
+# plt.savefig("Experiment/New_Experiment/Experiment1/figs/new.png", bbox_inches='tight')
+
+num_cpu=16
+fig, axs = plt.subplots(2, 4, figsize=(16, 8))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    ax = axs[i//4,i%4]  # 选择正确的子图
+    for method in range(2):
+        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        # 只在第一个子图时记录句柄和标签
+        if i == 0:
+            lines.append(line)
+            if method == 0:
+                label = "Hypercube_*-channel"
+            elif method == 1:
+                label = "Mesh_XY"
+            # elif method == 2:
+            #     label = "2-dim 4-ary Torus_*-channel"
+            labels.append(label)
+    
+    ax.set_title(f'{synthetic}, CPU={num_cpu}')
+    ax.set_xlabel('Injection Rate')
+    ax.set_ylabel('Latency(cycle)')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment1/figs/16.png")
+
+num_cpu=64
+fig, axs = plt.subplots(2, 4, figsize=(16, 8))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    ax = axs[i//4,i%4]  # 选择正确的子图
+    for method in range(2):
+        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        # 只在第一个子图时记录句柄和标签
+        if i == 0:
+            lines.append(line)
+            if method == 0:
+                label = "Hypercube_*-channel"
+            elif method == 1:
+                label = "Mesh_XY"
+            # elif method == 2:
+            #     label = "3-dim 4-ary Torus_*-channel"
+            labels.append(label)
+    
+    ax.set_title(f'{synthetic}, CPU={num_cpu}')
+    ax.set_xlabel('Injection Rate')
+    ax.set_ylabel('Latency(cycle)')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment1/figs/64.png")
diff --git a/Experiment/New_Experiment/Experiment2/plot.py b/Experiment/New_Experiment/Experiment2/plot.py
new file mode 100644
index 0000000000..dfe5fbb14a
--- /dev/null
+++ b/Experiment/New_Experiment/Experiment2/plot.py
@@ -0,0 +1,98 @@
+import matplotlib.pyplot as plt
+import numpy as np
+import re
+
+def extract_reception_rate(line):
+    match = re.search(r'reception_rate\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))
+    else:
+        return None
+
+synthetics = ["bit_complement","shuffle"]
+num_cpu = 64
+# inj_rates = np.arange(0.05, 1.05, 0.05).tolist()
+inj_rates = ["0.1","0.2",'0.3','0.4','0.5','0.6','0.7','0.8','0.9','1.0']
+latencies = [1,2,4]
+
+reception_rate = ({},{},{})
+
+path = "Experiment/New_Experiment/Experiment3/result3.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for latency in latencies:
+            for inj_rate in inj_rates:
+                print(lines[10*cnt+2-1])
+                print(f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[10*cnt+2-1] == f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
+                reception_rate[0][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[10*cnt+10-1])
+                print(reception_rate[0][(synthetic,latency,inj_rate)])
+                cnt+=1
+    
+    cnt = 0
+    for synthetic in synthetics:
+        for latency in latencies:
+            for inj_rate in inj_rates:
+                print(lines[9*cnt+602-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt+602-1] == f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
+                reception_rate[1][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[610+9*cnt-1])
+                print(reception_rate[1][(synthetic,latency,inj_rate)])
+                cnt+=1
+
+    cnt = 0
+    for synthetic in synthetics:
+        for latency in latencies:
+            for inj_rate in inj_rates:
+                print(lines[10*cnt+1142-1])
+                print(f"{synthetic}_TORUS_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[10*cnt+1142-1] == f"{synthetic}_TORUS_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
+                reception_rate[2][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[1150+10*cnt-1])
+                print(reception_rate[2][(synthetic,latency,inj_rate)])
+                cnt+=1
+
+fig, axs = plt.subplots(2, 3, figsize=(16, 12))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    for j, latency in enumerate(latencies):
+        ax = axs[i, j]  # 选择正确的子图
+        # for method in [range(2)]:
+        for method in [1,2,0]: # 倒着颜色比较对
+            reception_rate_ = [reception_rate[method].get((synthetic, latency, inj_rate), None) for inj_rate in inj_rates]
+            line, = ax.plot(inj_rates, reception_rate_, marker='o', label=f'Method {method}')
+            # 只在第一个子图时记录句柄和标签
+            if i == 0 and j == 0:
+                lines.append(line)
+                if method == 0:
+                    label = "Fully Adapt"
+                elif method == 1:
+                    label = "Hypercube_*-channel"
+                elif method == 2:
+                    label = "3D Torus_*-channel"
+                labels.append(label)
+        
+        ax.set_title(f'{synthetic}, link/router latency = {latency}')
+        ax.set_xlabel('Injection Rate')
+        ax.set_ylabel('Reception Rate')
+        ax.set_ylim(0, 1.05)
+        # 设置横轴刻度，只显示第4,8,12,16,20个数据点
+        selected_ticks = inj_rates[3:20:4]  # 选择第4,8,12,16,20个点
+        ax.set_xticks(selected_ticks)
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment3/figs/ex3.png")
+
diff --git a/Experiment/New_Experiment/Experiment3/plot.py b/Experiment/New_Experiment/Experiment3/plot.py
new file mode 100644
index 0000000000..22d102a936
--- /dev/null
+++ b/Experiment/New_Experiment/Experiment3/plot.py
@@ -0,0 +1,105 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))/2# 2是tick和cycle的比例
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpus = [4, 16, 64]
+inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
+latency = ({},{},{},{})
+
+path = "Experiment/New_Experiment/Experiment1/result1.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                print(9*cnt+2-1)
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+    num_cpus = [16, 64]
+    for num_cpu in num_cpus:
+        for synthetic in synthetics:
+            for inj_rate in inj_rates:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[2][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+
+path = "Experiment/New_Experiment/Experiment3/result3.txt" # 8^2
+num_cpu=64
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            print(lines[9*cnt+2-1])
+            print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
+            print(9*cnt+2-1)
+            # breakpoint()
+            assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
+            latency[3][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+            print(latency[3][(synthetic,num_cpu,inj_rate)])
+            cnt+=1
+
+num_cpu=64
+fig, axs = plt.subplots(2, 4, figsize=(16, 8))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    ax = axs[i//4,i%4]  # 选择正确的子图
+    for method in [0,1,3]:
+        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        # 只在第一个子图时记录句柄和标签
+        if i == 0:
+            lines.append(line)
+            if method == 0:
+                label = "Hypercube_*-channel (6-dim 2-ary) Torus"
+            elif method == 1:
+                label = "3-dim 4-ary Torus_*-channel"
+            elif method == 3:
+                label = "2-dim 8-ary Torus_*-channel"
+            labels.append(label)
+    
+    ax.set_title(f'{synthetic}, CPU={num_cpu}')
+    ax.set_xlabel('Injection Rate')
+    ax.set_ylabel('Latency(cycle)')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment3/figs/ex3.png")
diff --git a/Experiment/New_Experiment/Experiment4/plot.py b/Experiment/New_Experiment/Experiment4/plot.py
new file mode 100644
index 0000000000..39d333179c
--- /dev/null
+++ b/Experiment/New_Experiment/Experiment4/plot.py
@@ -0,0 +1,106 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))/2# 2是tick和cycle的比例
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpu = 64
+inj_rates = [0.2, 0.4, 0.6, 0.8, 1.0]
+num_star_channels = [2,4,6,8,10,12,14,16]
+latency = ({},{})
+
+path = "Experiment/New_Experiment/Experiment4/result4.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    current_line = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_star_channel in num_star_channels:
+                # print(lines[9*cnt+2-1])
+                # print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # print(9*cnt+2-1)
+                # # breakpoint()
+                while lines[current_line] != f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n": #其实是Cube
+                    # print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n")
+                    # print(lines[current_line])
+                    # breakpoint()
+                    current_line += 1
+                if lines[current_line+2][0]=='p':
+                    cnt += 1
+                    latency[0][(synthetic,num_star_channel,inj_rate)] = extract_latency(lines[current_line+6])
+                    print(lines[current_line],lines[current_line+6],latency[0][(synthetic,num_star_channel,inj_rate)])
+                # assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+    print(cnt)
+    num_star_channels = [2,4,6,8]
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_star_channel in num_star_channels:
+                # print(lines[9*cnt+2-1])
+                # print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                # print(9*cnt+2-1)
+                # # breakpoint()
+                while lines[current_line] != f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n": #其实是Cube
+                    # print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n")
+                    # print(lines[current_line])
+                    # breakpoint()
+                    current_line += 1
+                if lines[current_line+2][0]=='p':
+                    cnt += 1
+                    latency[1][(synthetic,num_star_channel,inj_rate)] = extract_latency(lines[current_line+6])
+                    print(lines[current_line],lines[current_line+6],latency[0][(synthetic,num_star_channel,inj_rate)])
+                # assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+    print(cnt)
+
+
+fig, axs = plt.subplots(4, 4, figsize=(16, 12))
+fig.subplots_adjust(hspace=0.5, wspace=0.5)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+num_star_channels = [2,4,6,8,10,12,14,16]
+for i, synthetic in enumerate(synthetics):
+    ax = axs[i//4,i%4]  # 选择正确的子图
+    for inj_rate in inj_rates:
+        latencies = [latency[0].get((synthetic, num_star_channel, inj_rate), None) for num_star_channel in num_star_channels]
+        line, = ax.plot(num_star_channels, latencies, marker='o')
+        # 只在第一个子图时记录句柄和标签
+        if i == 0:
+            lines.append(line)
+            label = f"inj_rate = {inj_rate}"
+            labels.append(label)
+    ax.set_title(f'{synthetic}')
+    ax.set_xlabel('num-star-channel')
+    ax.set_ylabel('latency(cycle)')
+
+# 遍历synthetics和num_cpus来填充每个小图
+num_star_channels = [4,8,12,16]
+for i, synthetic in enumerate(synthetics):
+    ax = axs[2+i//4,i%4]  # 选择正确的子图
+    for inj_rate in inj_rates:
+        latencies = [latency[1].get((synthetic, num_star_channel/2, inj_rate), None) for num_star_channel in num_star_channels]
+        line, = ax.plot(num_star_channels, latencies, marker='o')
+        # 只在第一个子图时记录句柄和标签
+        # if i == 0:
+        #     lines.append(line)
+        #     label = f"inj_rate = {inj_rate}"
+        #     labels.append(label)
+    # ax.set_title(f'{synthetic}')
+    ax.set_title(f'{synthetic}')
+    ax.set_xlabel('num-star-channel')
+    ax.set_ylabel('latency(cycle)')
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=5)
+fig.text(0.06, 0.75, '6-Hypercube', va='center', rotation='vertical', fontsize=12, weight='bold')
+fig.text(0.06, 0.25, '3-dim 4-ary torus', va='center', rotation='vertical', fontsize=12, weight='bold')
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/New_Experiment/Experiment4/figs/ex4.png")
diff --git a/Experiment/torus/Experiment1/plot1.py b/Experiment/torus/Experiment1/plot1.py
new file mode 100644
index 0000000000..57697bc491
--- /dev/null
+++ b/Experiment/torus/Experiment1/plot1.py
@@ -0,0 +1,131 @@
+import matplotlib.pyplot as plt
+import re
+
+def extract_latency(line):
+    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
+    if match:
+        return float(match.group(1))
+    else:
+        return None
+
+synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
+num_cpus = [4, 16, 64, 256]
+inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
+latency = ({},{},{})
+
+path = "Experiment/Experiment1/result_new_hypercube_new.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt+2-1])
+                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
+                print(9*cnt+2-1)
+                # breakpoint()
+                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
+                # breakpoint()
+                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+                print(latency[0][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+path = "Experiment/Experiment1/result_new_mesh.txt"
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            for num_cpu in num_cpus:
+                print(lines[9*cnt])
+                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
+                # breakpoint()
+                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
+                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
+                print(latency[1][(synthetic,num_cpu,inj_rate)])
+                cnt+=1
+
+path = "Experiment/torus/Experiment1/result1.txt"
+num_cpu=64
+with open(path, 'r') as file:
+    lines = file.readlines()
+    cnt = 0
+    for synthetic in synthetics:
+        for inj_rate in inj_rates:
+            print(lines[9*cnt+2-1])
+            print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
+            # breakpoint()
+            assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
+            latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
+            print(latency[2][(synthetic,num_cpu,inj_rate)])
+            cnt+=1
+
+
+# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
+# fig.subplots_adjust(hspace=0.8, wspace=0.4)
+
+# lines = []
+# labels = []
+# num_cpus = [16,64,256] # 4不要了
+
+# # 遍历synthetics和num_cpus来填充每个小图
+# for i, synthetic in enumerate(synthetics):
+#     for j, num_cpu in enumerate(num_cpus):
+#         ax = axs[i, j]  # 选择正确的子图
+#         for method in range(2):
+#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+#             # 只在第一个子图时记录句柄和标签
+#             if i == 0 and j == 1:
+#                 lines.append(line)
+#                 if method == 0:
+#                     label = "Hypercube_*-channel"
+#                 elif method == 1:
+#                     label = "Mesh_XY"
+#                 labels.append(label)
+        
+#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
+#         ax.set_xlabel('Injection Rate')
+#         ax.set_ylabel('Latency')
+
+# # 在整个图中添加一个全局图例，并将图例放在图像之外
+# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
+
+# # 显示图像
+# plt.show()
+# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
+
+fig, axs = plt.subplots(2, 4, figsize=(16, 8))
+fig.subplots_adjust(hspace=0.5, wspace=0.4)
+
+lines = []
+labels = []
+
+# 遍历synthetics和num_cpus来填充每个小图
+for i, synthetic in enumerate(synthetics):
+    ax = axs[i//4,i%4]  # 选择正确的子图
+    for method in range(3):
+        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
+        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
+        # 只在第一个子图时记录句柄和标签
+        if i == 0:
+            lines.append(line)
+            if method == 0:
+                label = "Hypercube_*-channel"
+            elif method == 1:
+                label = "Mesh_XY"
+            elif method == 2:
+                label = "3-dim 4-ary Torus_*-channel"
+            labels.append(label)
+    
+    ax.set_title(f'{synthetic}, CPU={num_cpu}')
+    ax.set_xlabel('Injection Rate')
+    ax.set_ylabel('Latency')
+
+# 在整个图中添加一个全局图例
+fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
+
+# 显示图像
+plt.show()
+plt.savefig("Experiment/torus/figs/fig1.png")
+
diff --git a/Experiment/torus/figs/fig1.png b/Experiment/torus/figs/fig1.png
new file mode 100644
index 0000000000000000000000000000000000000000..7111b2000a2fc9a11a68a7b65f81a47453e79617
GIT binary patch
literal 143908
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%0D~*UibI8
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%0DDoSOoCwPbl7qFfCR4w
zvqM9r=|KMC#S6sN(x2Wf03sbFO+<hTk{!tW`H25~36BE}IY#*ph~pvn1vP+^iz}Su
zF#@(J!@iBNR+Z}rzX>WH22ear2Twi?u(1ILR1$AcEVPA>cUz|x4>9+IstS=6z|%%y
zctPXR2w3#ALJk2?EK<0HAV&=1W{$!gjw2rDD9n;J@`1qUx+QxAk=mBwAN>xwRf{)1
z0X3IFz|D{;a3+KF2UyX=urKUa<Q_lPul2?UA&6JoOZ|v>W={2i8JqyhGsXi&=2V!&
zU1Km*I07yyqLh0CM-tc|eUV%bKnkA!VWnjJA|Vgw0(0&d<VKcjX@dn>Blz3>R!Vc<
zU2QD2oz}>W=QTH~+!-=Q;tyPk8EAu2U%YtH3XL2(>*F|VKZHrB@^6E3h`b5O{!$w^
z(1MtFczU+W!91%`ba!N02~n=*Ata%ma3iG#D}mG{M>VxLd}{C>zV~6i8iEZeSO9$l
zElt1N++2KWu<B~um~A8W4ArH60I@a*s=$Kg&RgKEGYzGt<M1xX7+q4z>=gh-%<%0%
z>E2IBcwqeW@jt(;{#n1z!2)Mgi{D}(45U|&wPB&a1gZ3Af2l*QxGj%W#lu3vhag1A
zQL+5huAvZ$SR{KZ&UHqQLE2mNbHE%tq`<G|L;n0lE`yVZ{N(<|tcL4sl*sz`^IMC(
zZH^-B?7>p>uCL%xfTjc;B0L3ASyS}!=}idmw?KHL1bvN<kJ7)s4pQC62fyxrCq@p`
zH`3r+`tO$>1GVFtlB|(%7lzFP8(!8=-pI26$971I4M12Jyolmy3cpf5^yz9yVg?O!
zxMTQhh~EtuL?R|bu-k}gnL<Ur!C~kE8H7pi7Yf({BR2J<Al5^nY7Os&JLs=*feqau
z)CYnFT^?-Y8B@p^aUY3H|9&y!LTVvX(8dB8`(xnu$zwfMS<6Ky>|_83JEE9TI}N*c
zU}Xm!z<{6}&8gi1H&NpdzL9lsaER6Cl!k5T3cJP?lnhjAyhOpbeYWkLJ#77Q%2$tJ
zDMR_x;N{1mS)OOuM%jNqKH%gHYs&45NPxWD8t;oDM0RMvhS6j))GgnIO;59t-$qo5
zV7cl3d@q3rH6iH`oJ4DozpOzPNpK64p~ViDxe<{ncmji^woGueq-2IbO125z8k>n)
z{193}`3YCVb{0%ETM#uE*sl$dEDC#|a)Ded>k&8XO`IMqog;v6GvGnif;d(iL3V|>
z^o%$STN-aGvHa#nZ2aKY-vUM`pT$5e@;(p|(;Ipv%>-uKzlr-mtKovAYr$G4q<f4f
zo{g~`af3m+3-h0w3q!xn`Ob7;aU*d6N<kY?-_L_U35O0I;#!4RCxd$T2awm$K&+}k
zu~o6@`|I<NwVZ)$B^7!{Cz6ceR#bw8N+p;jf~oTh9Co(`@l=G9Lut?WG%>M0Xsja6
zA_BBzAbE8csZV<|sg$)nd7&K-E~yPGq9;845Se+f_A1bCB10-!u<Y|d<UK*ehE>Ff
ze4YM(cp#FeQz}*WjFCQuEZBsQ6!@GCkNXH&1LEc};<-C&<PW_aivRn`_kWdk<?&Rm
zZC7=gNE#GL#E}ezNajSLl%mW;M5d6;3PnmfNRdby%tT4%=@gMNN87wJ53xlg^Sf@n
z?|Z&Kzu))yqjuT0=edXLTGzVnXDyIa+^6|byyz8OmBLf9xa7BZSm;QyEN1(E=AX6u
zS3dC93?QhRm^njE0&=A1@wg1PRy2l{?3@7q&>*}78@c@WKbiSR@(w6?|MT^K%H;q2
z_)^*bUl_p6{r`m#zpWem-J;v=@Su9@un4*G<aLOEIBwHyLJ-O7C0-(yO>CVn5Ip=R
zs@6ko8e|$t*wE4ip^$NyTp^P>fiOqKA5eY)WI{6ht{siM^ODP^W2a8-=I38~4RSY;
zc#Ol}-_3`JjvPtm&u^z$&n4=-jK(u1_|oJ@h@gXx8$Kaz@D+Ir*IpkX5Nv9_snev|
zzRW{zU+YYV^Sv*s;AxVgL4@G@RaPy6xQGy+L1|Q&u^t4}{PXo6Jhe{&q6BFEBsZIc
zK74Q52|7Sr=C4h;U=y~%E2!C|!Sc$_;kTygBnIQQm?VFAQ&Cizr0c>@?|`^al5EFM
z325CLgT=CSVa0DYUA{!r91X$Ytg!r`@%Ec5aIS?pzvTNbDTdi)2J)}NItaFc?m^}H
z!}Q&+N@&I=-8$74x7uS8^6`t)b@!0^5waqnVi1=Q1U|>?3oXUphtcOH51+R#5cf80
z%DeaODIy6G&z>5OQ8;qpd1xf|&0$;YBAR!&eBpgzzCit<_vqEu{9B7t-Ux34P3fo~
zxQMv+=FKHwSJY`9S70jvA0bF}rC#G>$buU=Oauqoax==SHQ3x4>6GLUjI3N9t{iI3
ze%Z`LhEbD^Gh+n^sE}lvxABK%f6Q-PA7_^HQ+yrcxp$3q6Y|;5Zihtd78GOvr<+m2
z2S?lTUl6JzFxzmJNasKkkl={hA-5kvp7E{ZQ8_mcWAa=K_Yvdn^v?%?jEK`Hr0X`a
zvaUI#th@?Xgdf$wWRv^xZjjO4M7|2j)+Ex>5!69!q7jt*zyd)kN(pwe<e^_Awrj*w
z5FeE8HfHMM>svLq=Dq%Zq$cI+GKK%qke0n%T^6{Vm>a-ZBhZBPDx??<uZ(08n<Lol
zhUOaKcHqP!D012r5{>KdUqmt-rDPXXUG=636x_$g_@_r4!2T|Y#Z3}vXrGk~x&?0O
zHpW(LH$HAUYz6r23$IRMXOi<1;X4S|c^M{_?mbaUYxz3#T(NPkZ@nm8I?wrXNdx+5
z#n**kO8U9a&lEcb-C-#L#`y*)`j57YVBC&F9}*<*jTBcJk`9TWfGNZWlt?SujW)lr
z+6*bJT>$dD@GvGtHt33+psA78a1hV?JSHq*Gcr2!%o)4E(792ItPaSCE3up{1*u>-
zD&?3Qh<N_EF=GLXtIgwEYD2Qt9mi^^Td3`Fcff+H4^NTD<1P5fOMs{2Ko-oi^Qa3*
zQk$6?MFloj0{<zpv#>@5#y#O5z_ml#>2DB?2m{34IJ;XVh`lrKTiTy!KOjLu_>rBm
zFTcGSHZT4G0o)=YcL6quHG6)cyuDcs##RwoFG=Sm2X2Q4@k%Qmptk^~s%_4cv!Kd8
zzp*+)obIzdU~E|f2zvw@Xbl5HH&(-Bk%rKJ?Zr+rNln>DocTU0a0s-eWqs^gq{~bj
zD#h4a4K$<F;@pq3q$PoQy*zK<l5}Qwc5yDsMKPGVvhBA#1X(al<OLKFcKtKR^|^3}
zSVK?$9DwVEVeacA`}Fs0C9;m%FO8}&3a}#RP0Oco3kd}o6?!bIg?>S_Ti069V+yES
z0AWeaC0iV|XO66KNI7}n1*)fZft+-Z?Ie%$K_A?&Amb{**Z{AG;5>$@V8k%XVwNvJ
z$VREi9!45b-V4*DI)kGtihxm<xym|sj4LsgBEIq%&rNV5W|U|<<l!Mr)HYEgCfK#-
z$xhTBZW?(X?2!vg;hd4IR^S@`x_&^81r-RCfkogI6}?A@FF@Cfu6fiS1CWpdU2zpC
zL^oBN*x_X7!4Ogv&e@kF+3jX+4{S$zNK*mw0%zz@m}ZbI1lhem!Cryg5-Rwv2&*mw
zvvsJC46gsVQze*V<bZWI_@pjk^?=C-(^&^k2y}4tdR&PTpV!RbZo9leUL>Jy@?NsU
zZx?=xd=qkLM-gHN5ELx#DNLX{DvtJ#%##vc69XDVr>a`2pB)`zNpPhkF12+~rxsiD
zr*a~H%w6w(dFI$q=>8z?aQ!2>;Z_H>Zv5DOK&;F*_Te*=vkxv8w?>&%;jwzwW8;>3
zpIWx;JIqvJo%caRe3NPAQ@!vf_3T3fQ!1_75<d5uao?Z%+&xz}?Nvk_oxNH!9bGf#
z=`H^xJ6i%5g+hc`Mn;C6on1H2DamNNpW<80$Hx)xr{hJ2Yq)M~cqw%3+S1?t&!2OT
zbF#2aerRNV)$=twRJ>WM!tpp${QVSu5$h{TN{uqM55mH>U>oeuX=3Bxs5Y=KjC1XG
zh2jN<zY9UZ&E0(;7AvhScLnoqR#^HT#zIF9>jNv=R^<6;<Dbd{wi4Xj%N-pZp;`yZ
zT?{4A3a}`#SPty+UQtjc#fb62tG)gk@tP)Qj_|=`89^M#akyz;`#56JBN)U(eeDDu
zm7vjRzkdC?1piC=Y#S@9W4gMm#LWq-9!v1j+%JcAzwXyp;h{}DOHk`S0pfK0{#8Lg
z(>jiF0YwGT*(0SX+(1O3!*q7fsc2c!_!@4{51*KD+A3^RIXC?Sc_O&u04T4wfbdf2
zbs_H~#+ICme2Bd;B=p(~j4q;q<5-sx9X&n$caV@REs@aF!Hud5gu$(N3|euj!PAas
zH2(<ZWSgp$y;kx}y>6R}*+~bP^I22t`gH(bI;Jx`XI(&8Ot!qx&kTUFJdx=s!g3{8
z9m&`ESSbumL!zUrJ4<d=eE9GcOd0{59<AWMmZ77;yLT@m3kwV3-zMDaVJ3+vr-C^G
zi>j2QNzB}RM`R==MIh(8Rmjj^@!3v{_Q&#WihzIsckxbYq6#g>P}{RG;JIkW;`7D%
zGv2AZQyOU+tyjK`>ZEEPcXHa##Ch<ANc!FI@N%fqIXF80xoekS-0^Txz!=qRaD+9e
z!)^x!k!eSxVys+#Ap|@;cuLS1W}hDHU3Gi79+FSFmwV~qU9oQ_a|<)`D_j_~0?RQC
zAF8W`9IdnAlki+S1-Ez(_<aKIxRqY!XoEg{s5w$xjaDO(k3?4$eN-!yc@UOdMWvo9
zuLTNF&A#%ZPYolW1P>WRI$Q+ysPSO`-__MYs2gg5rO5BXR6_CpeN|Ozn=|U8Tl%SA
z9)ClprmUmG=%t!ce~xm@+maGr&=(G!?^Y7+KN9E(!Chzzn0U_IT*=gw8(sYisE0i~
zxis4rSzE&yu&cTnWBHP4f}0evwcPkE_p_xL6$WHvh;7}vwMSm4)Yjo*VClW0HkRX#
z-3gPdh%5OnBT#x&9Cc6CzM~w|3GNqX1nLn{i7ptMgx!ggC)WoB1raG@6x?^v8i;!Q
zSR<toB-`q1_(A+@`ty?oSi11RxP}K7<4sM*L7zav5PL-yVIz#eN_%^I4q3ND*4D{s
zRanzxin`w4X-GO#zS9felXj)O(CLA%L1$A-%aG7d87ZmGp`m1n#RW{H`}eQQpm#&;
zwUL5BbRI?><!p;>q-1Gn8Ij4Pio3)upqqRorIEObE&O=0`07Fxo2;DNC&Ti(x)3mN
zq;u1E8A0fsAA>W?Q_h1|{ZA+Lz|aHxBP_QXmy+xJ?E!5$aU4V!x*IIW!^p_xg!wpe
z;)H)t(3c(IU}-U_YnhF8T`pZZhaG$(S~db4M*8JmRZ&q<bw1`pV{go|va;AEFI`)h
zpB3|(bE8p<7ftVE$$PCaQ8Q{=h(55WB9bkdY*mrooadZEb6j7WWotl&8s6Uisi{~a
z7vEy72p7+t9_{)CJW^3pV}Te$&=`=!YwS_q`Oqlu)-2oe5GJIHO-T3*tu6d|%hs&a
zI^mj6pY9<3!2DRZuU|q=ZU+++Q?#r*p%QSV;vTJyyNY){k#H#<dpE^!S5kW8C+P>u
z+49~CvPMQm7|2l7U08=iiMlrnxS%FN-us}0U0bc^Zm<v$AkeF$<&O7PKgJlvfTn57
zcRe*F#{#=;G|O=De*~yFfT_GZ`_mSmL<gQiQc5ZvxJ7izbFhBb!uMP98#p<G@7!Sk
znb(U>zLrqI<EW@g)c7au?1WU~PP2?+Bf|IMVOl$i2-1m>u<syI8p2^@a?=cReL!~m
z&ALfv;e0~<Q-u{S!%c6&{$1~i{p<ey&Cs+1DH_|x`f+9<66(@cR#sSoA(4>*w{ES5
zO7|Pfx_1NTFO7D{5lLEbg2wRQ*e3172O+i>z^f=cSl`rCRVl@tCO&YY5UTa<t?>wA
zf`=VJXq4iGEqpZLO#Qt`^mzxOqoaX&R%hxnYIcxK7)}d69=cG-b7O;|e~XgxQi|(}
zYsh!CudlD4;K00n-a9oh5sTTtPNsWhLlFY&t^h`6GV900djl~sF&q<7MM*%1VeZBX
z;0sf2kLh`?R^g<rF56iB8J~l@Rf(twPUiEZWQK=_8(nmFcPCt-$Jp6I4=v%W*FF9H
z=k4ulpz=z*2*JQ!fb1<c_T~8*=fV*`KR@iF5<m*js;B%~J!fcUf`Wn<FJ7F84<pPC
z2M0%@rT}J;oVY<tozkj|IN?;mbSS()z+Rr-Z~5xgtIs|HI}#EW=9ih7NfU2sZhls0
zDIh1*#Uc<!b}GW*dc;~%X?6?*zId@`{KpUCSJlyPjvLGC1~NE-kd8#d3qlR4bNg`r
z;M8k}?yfwAIO=FXl#FW-j!*5`yLVFP?!l_6sz8vD_n{Hjcyzow8^?nWfKEhsKYHns
z2nqshgca|P1td`I4@ro24l<OKolr8jvPwGcMc35Y+TGI=+iF+g*z3vhMt?878A$@p
z$;k<AhW(AIaL2uxqe$s!gFeGr)ip5q7Jo!=-cxhthbRu;oKRD1F7}pJmkrZFKS)r`
zE7WCr+#I<UBKY~VT)5_Z9UM%W4H6c<`O#^pVJ#;oCvjXwxlOppT+m8!-+Fs`h&MLQ
zB=};Ne+n1w7xtcJz=<rJV*9qE93Gh1!fwECVKaX9{W;nx=CEf2L$eGR3iANIXw~T9
z!4ToFNrt#t&hxXE5$hETB4gL&ZBSe@7Lce@9y-xmq?|cFGjz7>)^4p9JC(2B+@xE#
zWsWAJ5h?o6XAs4ohd1d}BQ}ddcovhhcHO#$Kzb2nBO?yndnYR9{kqzhxe|CDB!n>s
z2?c{Cdh5h<ijpgGAPYafnT5sTRppm2S?`=jhKEU$tizG8Vc-myw{9J3m$S97uyEo|
zaFX#;eD;V%URpX5@FfGjbOi+kud=dGxr#$fn5~fUd`nMnFP!rfG&MsNt_p;GOr(q%
zHl*+2xNY*6O#;_Y>c`f=X_+^C-Yueqp7Or%4mkTbynfPRe0-b^wdV$8B#%$3$~=s$
zBG=$XwGq`m*4y{7F%#Ii<;mnLEEevOk~m&W?RB5~wGTl2Jcv1xzhE5<6Th#bquLT;
zVpr_m#{_EByx_PUvsuu7O>EoAPT!XY6W_G+K2dXPx}w>V7OnT5suCCR=+U<#136h)
zED~a^YXT^-$GE61aWM5SjW6yOE2oXQB_zUejttQ;Wj5-d`}hrj+RDmGNskFWWbxiW
z39oJL-2($3N^UWcHZg?~jw#m^*n-VfPN7iFMHbXkNBa8u2(O8=1nBL-jW1haZ_JRk
z^v#bmOb{ssPgn*lDus{yw-FP@Qd_q_30q-Re^7qD3?M0~i9P0h3JVMCoWlg9%PBAP
zN{AOH@eQbbwnAH58v{}D)iW{3>+QpT199Ge1MxL}iY62LHRbeEEDfnX28#*&8LHQp
zUrMxB2>v2)LhY|plA75VWjreU5jcy`TswFE{j@4V%)%)~5p*X4Xx-Tpj;^j2Xk8)h
zYYlc;fyu?eqo??)?76NQ*VR{L98hYLsV`)ha|oM>(Nu6gJ0&GWC<}&UCKoPf_vQyb
z(atNniJhTfx;7vo8bZ7;*O~6uMgl|L@AhT#%6&B}ODk}8b?vwJp52b~W$(($;#;y8
zE1BtI5}rLb=X_;#+VFcpfmmhyF$bCZ$-9{XwN6VYJyZYsE#(Qjv!i1SvWa1_SK&LK
zE`%zSXUmr_C*313M;>eM8lMNIYAd`FPHYHppBb=v1T2<9$0O|9K3RKuzjp&xiFx9K
zHw)wBq^70Jzbw;u`gcctw4GX>$qYMnaT9QSCjvAb4!8IN3l8peb#~qb*WEznnC&Z1
z>(xyRojZTN1PaQN(XAja%7Z!kN4*zis;jGY_4EcCuljV=ak|pl6jHUJc`Qcf`>t<G
zgroyEfT#ruE9|r`V9MSmK!v1~?OLL0S_%rwF!rQz`_5TQU<-?oVeJ*6y?d*6*409M
zG|zRk8feR^?)ggi-}TpcFJx$pg`IpsfqmLjW6SnD@yVe^Qi=*V((gGB>O}-c*UEx+
zFfe<6L249yAv3-wI#ZYhkg_zTvv=l+FG3EN5q&%_{eyM<MTaz`3pK{4?s3_PN6yh%
zLU<T;GMJKDG|3<VYF&E)+mD>7L#-V|jx-|kqST^8_@D=ZFo$q7DA2)xcdJ&ddfsUL
zseKe+jDS8ud%#u}Kw;yyZAmE!wF##<!BdqIyYt@?fqej3t6Cw0eGYek?1to_{FB!H
z2?==_VetWJ2-kpcfA8_*D(oG-SLYPMg!;DGKpCERouilM2v`Cn-~7tNx9%H?|48g&
z92J64w;7HZ@$Aw%7?79@>f<oTm~96xvLfjl7J7t1&KxP|f{5ZkoVh8z*DhCqaL1d|
zNl$FXR|Jgm)O`4`Q%>%zy}l@&jg8HPn&>LPW$c5mfR%YQM=IVpqGQ_kWN~gc&M{w|
z9m$@Xr7nKi_1!BqHkRignsaE)F@UvV`Wr{La@@waVQlG;IUE!JF!G@&#ZgE-YS>M`
zg6b&SFB{%d4#zr4_i-Lzn<z+6Ac1XUVJXKMwvT5mCI;&GnCa2FlLPOMXr7eCqXY8r
zgeA48up<Wan69pFEt*KaA)9x>c_k<}R|>J^D`Z>QW!=<uWZto+rKQcGuVGOgB}F=#
z^&7p-(_g>lmXv&m!-;6<D1ur+|D0obdOFWzTQ3Hg3FIL;NrZ_@H>=oGc;hH)6?Cv6
zit7mYu`m|w{T+51TCKS{fbBkLHE&>JOMWy%!x*6t%A#x^0|GIxP5=cIJSK0$2VBP{
z>ie)~?$WwryhpbY>+eX!T#H0sMmkNhfg-$SNS*3aQ<m3FS?GPJZ3<v4>ounv-oU4p
zsvV=9Ld@dfMAC(#F;Aa}@M5PgLq&;0or4I9K#YHrq$X2o3_ZmlPWh9_hd88#1nCRn
zYlv3MNKem=o;nnN>r!-ty{7W1VN$P6zr4`HJ$;Tl&O$_jRX9Ck^EVqmQwQ~Y7;p}`
z6}Zz65bW|ui}>)!i1&zz7|fB0g-a8*J(!~NXc-&kIaLfy?#AH)oCGEkkM;#)tFZg)
zwlkhS3-BX_nFVcCPNj0{=;)xkc1=0PJy-dLW|=MDUrlQd#8v<Ki1&R>KBFg>2@Z~h
zUTGtysAxm#W?FB-<e|QC7^vlH-!FsgLPX_}M(Q&xP65<7zaRDv1QUg0B81~Z51S%K
z&2czS8fv6Wswkr-7ww%H51CTg|GI(G*2LbbMx}$ZE?bG(|C$OW1du=l_S8tbT>SjE
zo0@bHE_G<qs&V&7i=8Y+(qe>VplAY{haM0mLF%Y5QMn&Z)z*<RIipu>x-L_{3T$@;
zPDb594kHKq%gO-jed#GbCMV6Y32)rIIYgfwyj|jCc3WB5O`us(nCKW98tUd;;zIT}
zM`yl<-Nqe<VM@`d10B5&Hx6D+Mk~3KIOw#sx09sX+PWRE^(GUi(TKxA8)G2?(RF;E
zCr<nkL(1jEE&JIR(K&zL+^qM~%~s3m3G>)wV}4JMwWXQu^@NPGfx&Zb`etT4sIPiJ
z0hhM58BSewaXEm%9VK_=0SbGH;Wb6gp4(YDyhl51)mvC7b8gE%bKDO1{dxOALzJf1
z$Hlc_ar9HlG-0zAL5*}YFiF#~Xu9uF<a(t7y2i;X#|R}RygOp&8S-L_sJO=0#_`O^
z^(BYAybhugI+ChQ%pnSUZfz*u#vA{&Ehau@gLr8}X((lf(aS-R(nSEP5JWrTq>XKC
zBh5~b;u;M`GucG4f4uI4rd2~3;(!{qqrhE!M>PWuj{#(wM+7G(CPuD5<xdY-^|Y<V
z9>GEF)@~yW5WVk9N><q0j~a{5YpL;%Mx7Q218}7{xsid}Ag+k>l6Ym!A5s6z1(gEZ
z%9Sh4g)*|U%UfDzR;uva81wqox!ManrD!<9l!=AKl+T}=y0V3Fh_lTcV6H~9c3x{|
zarjczr1tyMZv0}j#_X%z+F2^*=;ZWbaKnv6XO#U~pSj2{RV;8aqu+xU&mY`>8@+TL
z=J%<`@Z!h_@7fJZ-$+K+PTg?N65puEDlq+6b3A`(gfs7)xV{UY(QrCGJ|3h4NY)kC
z;^KDE`#rxIvqYXGx+^Iup^U<*VS?E4Ht`+z$N)yK;P)X*r@<6&Xv=fHgQQAv;#;}^
z;T;AB1}JQLcsDNn{(FD;<44BmYppYxnVB1$Sbx7O5GBKh4@|$Wed#TDx%4gkVZGz`
z=P%vk(jWf%Dw}rx=i9&EnCQ&2jQgLT!K?q}oB9`*h5j_LI#kEJo(^BflujN=Q#|MM
EFE1K3$^ZZW

literal 0
HcmV?d00001

diff --git a/changes.patch b/changes.patch
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/configs/example/garnet_synth_traffic.py b/configs/example/garnet_synth_traffic.py
index 1da82e11b8..73224542eb 100644
--- a/configs/example/garnet_synth_traffic.py
+++ b/configs/example/garnet_synth_traffic.py
@@ -57,6 +57,7 @@ parser.add_argument(
         "neighbor",
         "shuffle",
         "transpose",
+        "custom",
     ],
 )
 
@@ -173,7 +174,8 @@ root = Root(full_system=False, system=system)
 root.system.mem_mode = "timing"
 
 # Not much point in this being higher than the L1 latency
-m5.ticks.setGlobalFrequency("1ps")
+# m5.ticks.setGlobalFrequency("1ps")
+m5.ticks.setGlobalFrequency("2GHz")
 
 # instantiate configuration
 m5.instantiate()
diff --git a/configs/network/Network.py b/configs/network/Network.py
index a5334741c0..425f6f9cf7 100644
--- a/configs/network/Network.py
+++ b/configs/network/Network.py
@@ -47,6 +47,18 @@ def define_options(parser):
         default=0,
         help="the number of rows in the mesh topology",
     )
+    parser.add_argument(
+        "--num-dim",
+        type=int,
+        default=2,
+        help="the number of dimensions in the torus tology",
+    )
+    parser.add_argument(
+        "--num-ary",
+        type=int,
+        default=2,
+        help="the number of ary in the torus tology",
+    )
     parser.add_argument(
         "--network",
         default="simple",
@@ -87,6 +99,13 @@ def define_options(parser):
         help="""number of virtual channels per virtual network
             inside garnet network.""",
     )
+    parser.add_argument(
+        "--num-star-channel",
+        action="store",
+        type=int,
+        default=1,
+        help="""number of star channels for hypercube""",
+    )
     parser.add_argument(
         "--routing-algorithm",
         action="store",
@@ -165,7 +184,10 @@ def init_network(options, network, InterfaceClass):
 
     if options.network == "garnet":
         network.num_rows = options.mesh_rows
+        network.num_dim = options.num_dim
+        network.num_ary = options.num_ary
         network.vcs_per_vnet = options.vcs_per_vnet
+        network.num_star_channel = options.num_star_channel
         network.ni_flit_size = options.link_width_bits / 8
         network.routing_algorithm = options.routing_algorithm
         network.garnet_deadlock_threshold = options.garnet_deadlock_threshold
diff --git a/configs/topologies/Cube.py b/configs/topologies/Cube.py
new file mode 100644
index 0000000000..eb996704ab
--- /dev/null
+++ b/configs/topologies/Cube.py
@@ -0,0 +1,129 @@
+from m5.params import *
+from m5.objects import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class Cube(SimpleTopology):
+    description = "Cube"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    # Makes a generic mesh
+    # assuming an equal number of cache and directory cntrls
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        nodes = self.nodes
+
+        num_routers = options.num_cpus
+
+        # assert num_routers == len(nodes), "Number of nodes is {} and number of routers is {}".format(
+        #     len(nodes), num_routers
+        # )
+
+        # default values for link latency and router latency.
+        # Can be over-ridden on a per link/router basis
+        link_latency = options.link_latency  # used by simple and garnet
+        router_latency = options.router_latency  # only used by garnet
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        # Add all but the remainder nodes to the list of nodes to be uniformly
+        # distributed across the network.
+        network_nodes = []
+        remainder_nodes = []
+        for node_index in range(len(nodes)):
+            if node_index < (len(nodes) - remainder):
+                network_nodes.append(nodes[node_index])
+            else:
+                remainder_nodes.append(nodes[node_index])
+
+        # Connect each node to the appropriate router
+        ext_links = []
+        for (i, n) in enumerate(network_nodes):
+            cntrl_level, router_id = divmod(i, num_routers)
+            assert cntrl_level < cntrls_per_router
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        # Connect the remainding nodes to router 0.  These should only be
+        # DMA nodes.
+        for (i, node) in enumerate(remainder_nodes):
+            assert node.type == "DMA_Controller"
+            assert i < remainder
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=node,
+                    int_node=routers[0],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        network.ext_links = ext_links
+
+        # Create the mesh links.
+        int_links = []
+
+        #assert the number of routers is power of 2
+        assert num_routers & (num_routers - 1) == 0, "Number of routers is not a power of 2"
+        import math
+        length = int(math.log(num_routers, 2))
+
+        # Create the adjacent links
+        for i in range(num_routers):
+            for j in range(length):
+                dest = i ^ (1 << j)
+                # most significant bit first
+                int_links.append(
+                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
+                    src_outport="msb {}".format(j),
+                    dst_inport="msb {}".format(j)
+                    )
+                )
+                link_count += 1
+
+        network.int_links = int_links
+        print("successfully made topology")
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/configs/topologies/Ring.py b/configs/topologies/Ring.py
new file mode 100644
index 0000000000..69d2d49db6
--- /dev/null
+++ b/configs/topologies/Ring.py
@@ -0,0 +1,201 @@
+# Copyright (c) 2010 Advanced Micro Devices, Inc.
+#               2016 Georgia Institute of Technology
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+from m5.params import *
+from m5.objects import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class Ring(SimpleTopology):
+    description = "Ring"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    # Makes a generic mesh
+    # assuming an equal number of cache and directory cntrls
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        nodes = self.nodes
+
+        num_routers = options.num_cpus
+
+        # assert num_routers == len(nodes), "Number of nodes is {} and number of routers is {}".format(
+        #     len(nodes), num_routers
+        # )
+
+        # default values for link latency and router latency.
+        # Can be over-ridden on a per link/router basis
+        link_latency = options.link_latency  # used by simple and garnet
+        router_latency = options.router_latency  # only used by garnet
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        # Add all but the remainder nodes to the list of nodes to be uniformly
+        # distributed across the network.
+        network_nodes = []
+        remainder_nodes = []
+        for node_index in range(len(nodes)):
+            if node_index < (len(nodes) - remainder):
+                network_nodes.append(nodes[node_index])
+            else:
+                remainder_nodes.append(nodes[node_index])
+
+        # Connect each node to the appropriate router
+        ext_links = []
+        for (i, n) in enumerate(network_nodes):
+            cntrl_level, router_id = divmod(i, num_routers)
+            assert cntrl_level < cntrls_per_router
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        # Connect the remainding nodes to router 0.  These should only be
+        # DMA nodes.
+        for (i, node) in enumerate(remainder_nodes):
+            assert node.type == "DMA_Controller"
+            assert i < remainder
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=node,
+                    int_node=routers[0],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        network.ext_links = ext_links
+
+        # # Connect each node to the appropriate router
+        # ext_links = []
+        # for (i, n) in enumerate(self.nodes):
+        #     ext_links.append(
+        #         ExtLink(
+        #             link_id=link_count,
+        #             ext_node=n,
+        #             int_node=routers[i],
+        #             latency=link_latency,
+        #         )
+        #     )
+        #     link_count += 1
+
+        # network.ext_links = ext_links
+
+        # Create the mesh links.
+        int_links = []
+
+        # Create the adjacent links
+        for i in range(num_routers):
+            if not i==num_routers-1:
+                int_links.append(
+                    IntLink(
+                        link_id=link_count,
+                        src_node=routers[i],
+                        dst_node=routers[(i + 1) % num_routers],
+                        latency=link_latency,
+                        weight=1,
+                    )
+                )
+            else:
+                # int_links.append(
+                #     IntLink(
+                #         link_id=link_count,
+                #         src_node=routers[i],
+                #         dst_node=routers[(i + 1) % num_routers],
+                #         latency=link_latency,
+                #         weight=100,
+                #     )
+                # )
+                link_count -= 1
+            link_count += 1
+
+        for i in range(num_routers):
+            if not i==0:
+                int_links.append(
+                    IntLink(
+                        link_id=link_count,
+                        src_node=routers[i],
+                        dst_node=routers[(i - 1) % num_routers],
+                        latency=link_latency,
+                        weight=1,
+                    )
+                )
+            else:
+                # int_links.append(
+                #     IntLink(
+                #         link_id=link_count,
+                #         src_node=routers[i],
+                #         dst_node=routers[(i - 1) % num_routers],
+                #         latency=link_latency,
+                #         weight=100,
+                #     )
+                # )
+                link_count -= 1
+            link_count += 1
+
+        network.int_links = int_links
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/configs/topologies/Torus.py b/configs/topologies/Torus.py
new file mode 100644
index 0000000000..5b44a40b4d
--- /dev/null
+++ b/configs/topologies/Torus.py
@@ -0,0 +1,147 @@
+from m5.params import *
+from m5.objects import *
+
+from common import FileSystemConfig
+
+from topologies.BaseTopology import SimpleTopology
+
+# Creates a generic Mesh assuming an equal number of cache
+# and directory controllers.
+# XY routing is enforced (using link weights)
+# to guarantee deadlock freedom.
+
+
+class Torus(SimpleTopology):
+    description = "Cube"
+
+    def __init__(self, controllers):
+        self.nodes = controllers
+
+    # Makes a generic mesh
+    # assuming an equal number of cache and directory cntrls
+
+    def makeTopology(self, options, network, IntLink, ExtLink, Router):
+        nodes = self.nodes
+
+        num_routers = options.num_cpus
+        num_dim = options.num_dim
+        num_ary = options.num_ary
+        assert num_ary > 2 # otherwise mesh
+
+        link_latency = options.link_latency  # used by simple and garnet
+        router_latency = options.router_latency  # only used by garnet
+
+        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
+
+        # Create the routers in the mesh
+        routers = [
+            Router(router_id=i, latency=router_latency)
+            for i in range(num_routers)
+        ]
+        network.routers = routers
+
+        # link counter to set unique link ids
+        link_count = 0
+
+        # Add all but the remainder nodes to the list of nodes to be uniformly
+        # distributed across the network.
+        network_nodes = []
+        remainder_nodes = []
+        for node_index in range(len(nodes)):
+            if node_index < (len(nodes) - remainder):
+                network_nodes.append(nodes[node_index])
+            else:
+                remainder_nodes.append(nodes[node_index])
+
+        # Connect each node to the appropriate router
+        ext_links = []
+        for (i, n) in enumerate(network_nodes):
+            cntrl_level, router_id = divmod(i, num_routers)
+            assert cntrl_level < cntrls_per_router
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=n,
+                    int_node=routers[router_id],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        # Connect the remainding nodes to router 0.  These should only be
+        # DMA nodes.
+        for (i, node) in enumerate(remainder_nodes):
+            assert node.type == "DMA_Controller"
+            assert i < remainder
+            ext_links.append(
+                ExtLink(
+                    link_id=link_count,
+                    ext_node=node,
+                    int_node=routers[0],
+                    latency=link_latency,
+                )
+            )
+            link_count += 1
+
+        network.ext_links = ext_links
+
+        # Create the mesh links.
+        int_links = []
+
+        #assert the number of routers is num_ary**num_dim
+        assert num_ary**num_dim == num_routers, " num_ary ^ num_dimis not equal to num_routers"
+
+        # # Create the adjacent links
+        # for i in range(num_routers):
+        #     for j in range(length):
+        #         dest = i ^ (1 << j)
+        #         # most significant bit first
+        #         int_links.append(
+        #             IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
+        #             src_outport="msb {}".format(j),
+        #             dst_inport="msb {}".format(j)
+        #             )
+        #         )
+        #         link_count += 1
+
+        # Create the adjacent links
+        # 只能祈祷...
+        for i in range(num_routers):
+            tmpi = i
+            pw = 1
+            for j in range(num_dim):
+                digit_j = tmpi % num_ary
+                tmpi //= num_ary
+
+                # plus:
+                dest = i - digit_j *pw + (digit_j+1)%num_ary * pw
+                print("plus",i,dest);
+                int_links.append(
+                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
+                    src_outport="plus {}".format(j),
+                    dst_inport="plus {}".format(j)
+                    )
+                )
+                link_count += 1
+
+                # plus:
+                dest = i - digit_j *pw + (digit_j+num_ary-1)%num_ary * pw
+                print("minus", i,dest);
+                int_links.append(
+                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
+                    src_outport="minus {}".format(j),
+                    dst_inport="minus {}".format(j)
+                    )
+                )
+                link_count += 1
+
+                pw = pw * num_ary
+
+        network.int_links = int_links
+        print("successfully made topology")
+    # Register nodes with filesystem
+    def registerTopology(self, options):
+        for i in range(options.num_cpus):
+            FileSystemConfig.register_node(
+                [i], MemorySize(options.mem_size) // options.num_cpus, i
+            )
diff --git a/network_stats.txt b/network_stats.txt
new file mode 100644
index 0000000000..76a81a166c
--- /dev/null
+++ b/network_stats.txt
@@ -0,0 +1,289 @@
+
+shuffle_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639739                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4505.440500                       ((Tick/Count))
+average_packet_latency = 5505.440500                       ((Tick/Count))
+average_hops = 3.000699                       (Ratio)
+reception_rate = 0.099959                       ((Count/Cycle))
+shuffle_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278519                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4511.582151                       ((Tick/Count))
+average_packet_latency = 5511.582151                       ((Tick/Count))
+average_hops = 3.000431                       (Ratio)
+reception_rate = 0.199769                       ((Count/Cycle))
+shuffle_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197898                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4540.217668                       ((Tick/Count))
+average_packet_latency = 5540.217668                       ((Tick/Count))
+average_hops = 2.999711                       (Ratio)
+reception_rate = 0.499672                       ((Count/Cycle))
+shuffle_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393266                       (Count)
+average_packet_queueing_latency = 1000.000469                       ((Tick/Count))
+average_packet_network_latency = 4623.799401                       ((Tick/Count))
+average_packet_latency = 5623.799870                       ((Tick/Count))
+average_hops = 2.999991                       (Ratio)
+reception_rate = 0.998948                       ((Count/Cycle))
+transpose_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639742                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4507.707795                       ((Tick/Count))
+average_packet_latency = 5507.707795                       ((Tick/Count))
+average_hops = 3.003017                       (Ratio)
+reception_rate = 0.099960                       ((Count/Cycle))
+transpose_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278528                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4508.101113                       ((Tick/Count))
+average_packet_latency = 5508.101113                       ((Tick/Count))
+average_hops = 2.999313                       (Ratio)
+reception_rate = 0.199770                       ((Count/Cycle))
+transpose_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197897                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4515.289110                       ((Tick/Count))
+average_packet_latency = 5515.289110                       ((Tick/Count))
+average_hops = 2.998442                       (Ratio)
+reception_rate = 0.499671                       ((Count/Cycle))
+transpose_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393266                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4517.705113                       ((Tick/Count))
+average_packet_latency = 5517.705113                       ((Tick/Count))
+average_hops = 2.999941                       (Ratio)
+reception_rate = 0.998948                       ((Count/Cycle))
+tornado_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639744                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3751.509979                       ((Tick/Count))
+average_packet_latency = 4751.509979                       ((Tick/Count))
+average_hops = 2.249944                       (Ratio)
+reception_rate = 0.099960                       ((Count/Cycle))
+tornado_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278533                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3755.987917                       ((Tick/Count))
+average_packet_latency = 4755.987917                       ((Tick/Count))
+average_hops = 2.249819                       (Ratio)
+reception_rate = 0.199771                       ((Count/Cycle))
+tornado_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197920                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3787.613199                       ((Tick/Count))
+average_packet_latency = 4787.613199                       ((Tick/Count))
+average_hops = 2.249801                       (Ratio)
+reception_rate = 0.499675                       ((Count/Cycle))
+tornado_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393314                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3922.500600                       ((Tick/Count))
+average_packet_latency = 4922.500600                       ((Tick/Count))
+average_hops = 2.249999                       (Ratio)
+reception_rate = 0.998955                       ((Count/Cycle))
+neighbor_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639743                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3250.807746                       ((Tick/Count))
+average_packet_latency = 4250.807746                       ((Tick/Count))
+average_hops = 1.749937                       (Ratio)
+reception_rate = 0.099960                       ((Count/Cycle))
+neighbor_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278533                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3254.008696                       ((Tick/Count))
+average_packet_latency = 4254.008696                       ((Tick/Count))
+average_hops = 1.750465                       (Ratio)
+reception_rate = 0.199771                       ((Count/Cycle))
+neighbor_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197928                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3270.082378                       ((Tick/Count))
+average_packet_latency = 4270.082378                       ((Tick/Count))
+average_hops = 1.750361                       (Ratio)
+reception_rate = 0.499676                       ((Count/Cycle))
+neighbor_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393347                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 3312.491407                       ((Tick/Count))
+average_packet_latency = 4312.491407                       ((Tick/Count))
+average_hops = 1.750005                       (Ratio)
+reception_rate = 0.998960                       ((Count/Cycle))
+uniform_random_inj0.1
+======================
+packets_injected = 638983                       (Count)
+packets_received = 638956                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4532.288608                       ((Tick/Count))
+average_packet_latency = 5532.288608                       ((Tick/Count))
+average_hops = 3.001509                       (Ratio)
+reception_rate = 0.099837                       ((Count/Cycle))
+uniform_random_inj0.2
+======================
+packets_injected = 1278553                       (Count)
+packets_received = 1278490                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4565.050176                       ((Tick/Count))
+average_packet_latency = 5565.050176                       ((Tick/Count))
+average_hops = 3.002083                       (Ratio)
+reception_rate = 0.199764                       ((Count/Cycle))
+uniform_random_inj0.5
+======================
+packets_injected = 3198242                       (Count)
+packets_received = 3198080                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4668.785177                       ((Tick/Count))
+average_packet_latency = 5668.785177                       ((Tick/Count))
+average_hops = 3.000029                       (Ratio)
+reception_rate = 0.499700                       ((Count/Cycle))
+uniform_random_inj1.0
+======================
+packets_injected = 6393561                       (Count)
+packets_received = 6393208                       (Count)
+average_packet_queueing_latency = 1000.018926                       ((Tick/Count))
+average_packet_network_latency = 4955.762428                       ((Tick/Count))
+average_packet_latency = 5955.781354                       ((Tick/Count))
+average_hops = 2.999576                       (Ratio)
+reception_rate = 0.998939                       ((Count/Cycle))
+bit_complement_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639713                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 7503.817337                       ((Tick/Count))
+average_packet_latency = 8503.817337                       ((Tick/Count))
+average_hops = 6                       (Ratio)
+reception_rate = 0.099955                       ((Count/Cycle))
+bit_complement_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278480                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 7515.329141                       ((Tick/Count))
+average_packet_latency = 8515.329141                       ((Tick/Count))
+average_hops = 6                       (Ratio)
+reception_rate = 0.199763                       ((Count/Cycle))
+bit_complement_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197807                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 7604.534920                       ((Tick/Count))
+average_packet_latency = 8604.534920                       ((Tick/Count))
+average_hops = 6                       (Ratio)
+reception_rate = 0.499657                       ((Count/Cycle))
+bit_complement_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393025                       (Count)
+average_packet_queueing_latency = 1000.067965                       ((Tick/Count))
+average_packet_network_latency = 8601.966987                       ((Tick/Count))
+average_packet_latency = 9602.034952                       ((Tick/Count))
+average_hops = 6                       (Ratio)
+reception_rate = 0.998910                       ((Count/Cycle))
+bit_reverse_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639740                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4508.158783                       ((Tick/Count))
+average_packet_latency = 5508.158783                       ((Tick/Count))
+average_hops = 3.003480                       (Ratio)
+reception_rate = 0.099959                       ((Count/Cycle))
+bit_reverse_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278521                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4510.151182                       ((Tick/Count))
+average_packet_latency = 5510.151182                       ((Tick/Count))
+average_hops = 3.001379                       (Ratio)
+reception_rate = 0.199769                       ((Count/Cycle))
+bit_reverse_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197892                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4516.190822                       ((Tick/Count))
+average_packet_latency = 5516.190822                       ((Tick/Count))
+average_hops = 2.999275                       (Ratio)
+reception_rate = 0.499671                       ((Count/Cycle))
+bit_reverse_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393267                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4517.401745                       ((Tick/Count))
+average_packet_latency = 5517.401745                       ((Tick/Count))
+average_hops = 2.999950                       (Ratio)
+reception_rate = 0.998948                       ((Count/Cycle))
+bit_rotation_inj0.1
+======================
+packets_injected = 639763                       (Count)
+packets_received = 639739                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4517.546218                       ((Tick/Count))
+average_packet_latency = 5517.546218                       ((Tick/Count))
+average_hops = 3.000699                       (Ratio)
+reception_rate = 0.099959                       ((Count/Cycle))
+bit_rotation_inj0.2
+======================
+packets_injected = 1278577                       (Count)
+packets_received = 1278519                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4534.884112                       ((Tick/Count))
+average_packet_latency = 5534.884112                       ((Tick/Count))
+average_hops = 3.000431                       (Ratio)
+reception_rate = 0.199769                       ((Count/Cycle))
+bit_rotation_inj0.5
+======================
+packets_injected = 3198054                       (Count)
+packets_received = 3197898                       (Count)
+average_packet_queueing_latency = 1000                       ((Tick/Count))
+average_packet_network_latency = 4594.747863                       ((Tick/Count))
+average_packet_latency = 5594.747863                       ((Tick/Count))
+average_hops = 2.999711                       (Ratio)
+reception_rate = 0.499672                       ((Count/Cycle))
+bit_rotation_inj1.0
+======================
+packets_injected = 6393587                       (Count)
+packets_received = 6393259                       (Count)
+average_packet_queueing_latency = 1000.004067                       ((Tick/Count))
+average_packet_network_latency = 4766.745255                       ((Tick/Count))
+average_packet_latency = 5766.749321                       ((Tick/Count))
+average_hops = 2.999990                       (Ratio)
+reception_rate = 0.998947                       ((Count/Cycle))
diff --git a/project.patch b/project.patch
new file mode 100644
index 0000000000..b88add4c36
--- /dev/null
+++ b/project.patch
@@ -0,0 +1,4556 @@
+diff --git a/.gitignore b/.gitignore
+index 229a0d5ae9..daae3eccbe 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -32,3 +32,5 @@ configs/example/memcheck.cfg
+ configs/dram/lowp_sweep.cfg
+ .pyenv
+ .vscode
++*.txt
++*.sh
+\ No newline at end of file
+diff --git a/Experiment/Experiment1/plot1.py b/Experiment/Experiment1/plot1.py
+new file mode 100644
+index 0000000000..cdda39208c
+--- /dev/null
++++ b/Experiment/Experiment1/plot1.py
+@@ -0,0 +1,108 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))
++    else:
++        return None
++
++synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
++num_cpus = [4, 16, 64, 256]
++inj_rates = [0.1, 0.2, 0.5, 1.0]
++latency = ({},{},{})
++
++path = "Experiment/Experiment1/result.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[10*cnt+2-1])
++                print(f"{synthetic}_DOR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[10*cnt+2-1] == f"{synthetic}_DOR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[10*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++    
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[642+9*cnt-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[642+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[642+9*cnt-1])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[642+9*cnt-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
++                print(latency[2][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++fig, axs = plt.subplots(4, 4, figsize=(16, 16))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = axs[i, j]  # 选择正确的子图
++        for method in range(3):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 0:
++                lines.append(line)
++                if method == 0:
++                    label = "Hypercube_DOR"
++                elif method == 1:
++                    label = "Hypercube_*-channel"
++                elif method == 2:
++                    label = "Mesh_XY"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3)
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = axs[i, j]  # 选择正确的子图
++#         for method in range(3):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             if method == 0:
++#                 label = "Hypercube_DOR"
++#             elif method == 1:
++#                 label = "Hypercube_*-channel"
++#             elif method == 2:
++#                 label = "Mesh_XY"
++#             ax.plot(inj_rates, latencies, marker='o', label=label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++#         ax.legend()
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/Experiment1/ex1_fig1.png")
++
+diff --git a/Experiment/Experiment1/plot2.py b/Experiment/Experiment1/plot2.py
+new file mode 100644
+index 0000000000..71d3f80f1d
+--- /dev/null
++++ b/Experiment/Experiment1/plot2.py
+@@ -0,0 +1,111 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))
++    else:
++        return None
++
++# synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
++synthetics = ["bit_complement"]
++num_cpus = [4, 16, 64, 256]
++inj_rates = [0.1, 0.2, 0.5, 1.0]
++vcs_per_vnets = [4,8,12,16]
++latency = ({},{},{})
++
++path = "Experiment/Experiment1/result.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                for vcs_per_vnet in vcs_per_vnets:
++                    print(lines[10*cnt+2-1])
++                    print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                    # breakpoint()
++                    assert lines[10*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                    latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[10*cnt+8-1])
++                    print(latency[0][(synthetic,num_cpu,inj_rate)])
++                    cnt+=1
++    
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[642+9*cnt-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[642+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[642+9*cnt-1])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[642+9*cnt-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[648+9*cnt-1])
++                print(latency[2][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++fig, axs = plt.subplots(4, 4, figsize=(16, 16))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = axs[i, j]  # 选择正确的子图
++        for method in range(3):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 0:
++                lines.append(line)
++                if method == 0:
++                    label = "Hypercube_DOR"
++                elif method == 1:
++                    label = "Hypercube_*-channel"
++                elif method == 2:
++                    label = "Mesh_XY"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=3)
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = axs[i, j]  # 选择正确的子图
++#         for method in range(3):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             if method == 0:
++#                 label = "Hypercube_DOR"
++#             elif method == 1:
++#                 label = "Hypercube_*-channel"
++#             elif method == 2:
++#                 label = "Mesh_XY"
++#             ax.plot(inj_rates, latencies, marker='o', label=label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++#         ax.legend()
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/Experiment1/ex1_fig1.png")
++
+diff --git a/Experiment/Experiment1/plot3.py b/Experiment/Experiment1/plot3.py
+new file mode 100644
+index 0000000000..ce3c3b33b0
+--- /dev/null
++++ b/Experiment/Experiment1/plot3.py
+@@ -0,0 +1,143 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))/1000
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpus = [4, 16, 64, 256]
++inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
++latency = ({},{},{})
++
++path = "Experiment/Experiment1/result_new_hypercube_new.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                print(9*cnt+2-1)
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++path = "Experiment/Experiment1/result_new_mesh.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
++# fig.subplots_adjust(hspace=0.8, wspace=0.4)
++
++# lines = []
++# labels = []
++# num_cpus = [16,64,256] # 4不要了
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = axs[i, j]  # 选择正确的子图
++#         for method in range(2):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++#             # 只在第一个子图时记录句柄和标签
++#             if i == 0 and j == 1:
++#                 lines.append(line)
++#                 if method == 0:
++#                     label = "Hypercube_*-channel"
++#                 elif method == 1:
++#                     label = "Mesh_XY"
++#                 labels.append(label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++
++# # 在整个图中添加一个全局图例，并将图例放在图像之外
++# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# # 显示图像
++# plt.show()
++# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
++
++import matplotlib.pyplot as plt
++import matplotlib.gridspec as gridspec
++import matplotlib.lines as mlines
++
++fig = plt.figure(figsize=(18, 18))
++# 定义gridspec布局
++outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
++
++# 创建左右两部分
++left_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
++right_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
++
++lines = []
++labels = []
++num_cpus = [16, 64, 256]  # 4不要了
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics[:4]):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
++        for method in range(2):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 1:
++                lines.append(line)
++                if method == 0:
++                    label = "Hypercube_*-channel"
++                elif method == 1:
++                    label = "Mesh_XY"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 右侧部分
++for i, synthetic in enumerate(synthetics[4:]):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = fig.add_subplot(right_grid[i, j])
++        for method in range(2):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 在整个图中添加一个全局图例，并将图例放在图像下方
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# # 在中间绘制虚线分割
++# fig.text(0.5, 0.5, '', ha='center', va='center')
++# plt.axvline(x=0.495, color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
++
++# 手动绘制虚线分割线
++line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
++fig.add_artist(line)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
+diff --git a/Experiment/Experiment3/plot.py b/Experiment/Experiment3/plot.py
+new file mode 100644
+index 0000000000..d4d6bd285c
+--- /dev/null
++++ b/Experiment/Experiment3/plot.py
+@@ -0,0 +1,85 @@
++import matplotlib.pyplot as plt
++import numpy as np
++import re
++
++def extract_reception_rate(line):
++    match = re.search(r'reception_rate\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))
++    else:
++        return None
++
++# synthetics = ["tornado","neighbor","uniform_random","bit_complement"]
++synthetics = ["bit_complement","shuffle","uniform_random"]
++num_cpu = 64
++# inj_rates = np.arange(0.05, 1.05, 0.05).tolist()
++inj_rates = ["0.05","0.1","0.15","0.2","0.25",'0.3','0.35','0.4','0.45','0.5','0.55','0.6','0.65','0.7','0.75','0.8','0.85','0.9','0.95','1.0']
++latencies = [1,2,4]
++
++reception_rate = ({},{},{})
++
++path = "Experiment/Experiment3/result/result2_largeth.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for latency in latencies:
++            for inj_rate in inj_rates:
++                print(lines[10*cnt+2-1])
++                print(f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[10*cnt+2-1] == f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
++                reception_rate[0][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[10*cnt+10-1])
++                print(reception_rate[0][(synthetic,latency,inj_rate)])
++                cnt+=1
++    
++    cnt = 0
++    for synthetic in synthetics:
++        for latency in latencies:
++            for inj_rate in inj_rates:
++                print(lines[10*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[1802+9*cnt-1] == f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
++                reception_rate[1][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[1810+9*cnt-1])
++                print(reception_rate[1][(synthetic,latency,inj_rate)])
++                cnt+=1
++
++fig, axs = plt.subplots(3, 3, figsize=(16, 16))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    for j, latency in enumerate(latencies):
++        ax = axs[i, j]  # 选择正确的子图
++        # for method in [range(2)]:
++        for method in [1,0]: # 倒着颜色比较对
++            reception_rate_ = [reception_rate[method].get((synthetic, latency, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, reception_rate_, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 0:
++                lines.append(line)
++                if method == 0:
++                    label = "Fully Adapt"
++                elif method == 1:
++                    label = "*-channel"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, link/router latency = {latency}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Reception Rate')
++        ax.set_ylim(0, 1.05)
++        # 设置横轴刻度，只显示第4,8,12,16,20个数据点
++        selected_ticks = inj_rates[3:20:4]  # 选择第4,8,12,16,20个点
++        ax.set_xticks(selected_ticks)
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/Experiment3/figs/fig2.png")
++
+diff --git a/Experiment/New_Experiment/Additional/plot.py b/Experiment/New_Experiment/Additional/plot.py
+new file mode 100644
+index 0000000000..65a8dc3cec
+--- /dev/null
++++ b/Experiment/New_Experiment/Additional/plot.py
+@@ -0,0 +1,103 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))/2
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpus = [4, 16, 64, 256]
++inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
++latency = ({},{},{})
++
++path = "Experiment/New_Experiment/Additional/result.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                print(9*cnt+2-1)
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++import matplotlib.pyplot as plt
++import matplotlib.gridspec as gridspec
++import matplotlib.lines as mlines
++
++fig = plt.figure(figsize=(18, 18))
++# 定义gridspec布局
++outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
++
++# 创建左右两部分
++left_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
++right_grid = gridspec.GridSpecFromSubplotSpec(4, 3, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
++
++lines = []
++labels = []
++num_cpus = [16, 64, 256]  # 4不要了
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics[:4]):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
++        for method in range(2):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 1:
++                lines.append(line)
++                if method == 0:
++                    label = "Hypercube_*-channel"
++                elif method == 1:
++                    label = "Mesh_XY"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 右侧部分
++for i, synthetic in enumerate(synthetics[4:]):
++    for j, num_cpu in enumerate(num_cpus):
++        ax = fig.add_subplot(right_grid[i, j])
++        for method in range(2):
++            latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++            ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        
++        ax.set_title(f'{synthetic}, CPU={num_cpu}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Latency')
++
++# 在整个图中添加一个全局图例，并将图例放在图像下方
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# 手动绘制虚线分割线
++line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
++fig.add_artist(line)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment1/figs/additional.png", bbox_inches='tight')
+diff --git a/Experiment/New_Experiment/Experiment1/plot.py b/Experiment/New_Experiment/Experiment1/plot.py
+new file mode 100644
+index 0000000000..e1ef35e063
+--- /dev/null
++++ b/Experiment/New_Experiment/Experiment1/plot.py
+@@ -0,0 +1,221 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))/2# 2是tick和cycle的比例
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpus = [4, 16, 64]
++inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
++latency = ({},{},{})
++
++path = "Experiment/New_Experiment/Experiment1/result1.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                print(9*cnt+2-1)
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    num_cpus = [16, 64]
++    for num_cpu in num_cpus:
++        for synthetic in synthetics:
++            for inj_rate in inj_rates:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[2][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
++# fig.subplots_adjust(hspace=0.8, wspace=0.4)
++
++# lines = []
++# labels = []
++# num_cpus = [16,64,256] # 4不要了
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = axs[i, j]  # 选择正确的子图
++#         for method in range(2):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++#             # 只在第一个子图时记录句柄和标签
++#             if i == 0 and j == 1:
++#                 lines.append(line)
++#                 if method == 0:
++#                     label = "Hypercube_*-channel"
++#                 elif method == 1:
++#                     label = "Mesh_XY"
++#                 labels.append(label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++
++# # 在整个图中添加一个全局图例，并将图例放在图像之外
++# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# # 显示图像
++# plt.show()
++# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
++
++# import matplotlib.pyplot as plt
++# import matplotlib.gridspec as gridspec
++# import matplotlib.lines as mlines
++
++# fig = plt.figure(figsize=(18, 18))
++# # 定义gridspec布局
++# outer = gridspec.GridSpec(1, 2, width_ratios=[1, 1], wspace=0.2)
++
++# # 创建左右两部分
++# left_grid = gridspec.GridSpecFromSubplotSpec(4, 2, subplot_spec=outer[0], hspace=0.8, wspace=0.6)
++# right_grid = gridspec.GridSpecFromSubplotSpec(4, 2, subplot_spec=outer[1], hspace=0.8, wspace=0.6)
++
++# lines = []
++# labels = []
++# num_cpus = [16, 64]  # 4不要了
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics[:4]):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = fig.add_subplot(left_grid[i, j])  # 左侧部分
++#         for method in range(2):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++#             # 只在第一个子图时记录句柄和标签
++#             if i == 0 and j == 1:
++#                 lines.append(line)
++#                 if method == 0:
++#                     label = "Hypercube_*-channel"
++#                 elif method == 1:
++#                     label = "Mesh_XY"
++#                 labels.append(label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++
++# # 右侧部分
++# for i, synthetic in enumerate(synthetics[4:]):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = fig.add_subplot(right_grid[i, j])
++#         for method in range(2):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++
++# # 在整个图中添加一个全局图例，并将图例放在图像下方
++# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# # # 在中间绘制虚线分割
++# # fig.text(0.5, 0.5, '', ha='center', va='center')
++# # plt.axvline(x=0.495, color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
++
++# # 手动绘制虚线分割线
++# line = mlines.Line2D([0.5, 0.5], [0.1, 0.9], color='black', linestyle='--', linewidth=2, transform=fig.transFigure, clip_on=False)
++# fig.add_artist(line)
++
++# # 显示图像
++# plt.show()
++# plt.savefig("Experiment/New_Experiment/Experiment1/figs/new.png", bbox_inches='tight')
++
++num_cpu=16
++fig, axs = plt.subplots(2, 4, figsize=(16, 8))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    ax = axs[i//4,i%4]  # 选择正确的子图
++    for method in range(2):
++        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        # 只在第一个子图时记录句柄和标签
++        if i == 0:
++            lines.append(line)
++            if method == 0:
++                label = "Hypercube_*-channel"
++            elif method == 1:
++                label = "Mesh_XY"
++            # elif method == 2:
++            #     label = "2-dim 4-ary Torus_*-channel"
++            labels.append(label)
++    
++    ax.set_title(f'{synthetic}, CPU={num_cpu}')
++    ax.set_xlabel('Injection Rate')
++    ax.set_ylabel('Latency(cycle)')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment1/figs/16.png")
++
++num_cpu=64
++fig, axs = plt.subplots(2, 4, figsize=(16, 8))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    ax = axs[i//4,i%4]  # 选择正确的子图
++    for method in range(2):
++        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        # 只在第一个子图时记录句柄和标签
++        if i == 0:
++            lines.append(line)
++            if method == 0:
++                label = "Hypercube_*-channel"
++            elif method == 1:
++                label = "Mesh_XY"
++            # elif method == 2:
++            #     label = "3-dim 4-ary Torus_*-channel"
++            labels.append(label)
++    
++    ax.set_title(f'{synthetic}, CPU={num_cpu}')
++    ax.set_xlabel('Injection Rate')
++    ax.set_ylabel('Latency(cycle)')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment1/figs/64.png")
+diff --git a/Experiment/New_Experiment/Experiment2/plot.py b/Experiment/New_Experiment/Experiment2/plot.py
+new file mode 100644
+index 0000000000..dfe5fbb14a
+--- /dev/null
++++ b/Experiment/New_Experiment/Experiment2/plot.py
+@@ -0,0 +1,98 @@
++import matplotlib.pyplot as plt
++import numpy as np
++import re
++
++def extract_reception_rate(line):
++    match = re.search(r'reception_rate\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))
++    else:
++        return None
++
++synthetics = ["bit_complement","shuffle"]
++num_cpu = 64
++# inj_rates = np.arange(0.05, 1.05, 0.05).tolist()
++inj_rates = ["0.1","0.2",'0.3','0.4','0.5','0.6','0.7','0.8','0.9','1.0']
++latencies = [1,2,4]
++
++reception_rate = ({},{},{})
++
++path = "Experiment/New_Experiment/Experiment3/result3.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for latency in latencies:
++            for inj_rate in inj_rates:
++                print(lines[10*cnt+2-1])
++                print(f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[10*cnt+2-1] == f"{synthetic}_RandomDimension_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
++                reception_rate[0][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[10*cnt+10-1])
++                print(reception_rate[0][(synthetic,latency,inj_rate)])
++                cnt+=1
++    
++    cnt = 0
++    for synthetic in synthetics:
++        for latency in latencies:
++            for inj_rate in inj_rates:
++                print(lines[9*cnt+602-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt+602-1] == f"{synthetic}_STAR_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
++                reception_rate[1][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[610+9*cnt-1])
++                print(reception_rate[1][(synthetic,latency,inj_rate)])
++                cnt+=1
++
++    cnt = 0
++    for synthetic in synthetics:
++        for latency in latencies:
++            for inj_rate in inj_rates:
++                print(lines[10*cnt+1142-1])
++                print(f"{synthetic}_TORUS_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[10*cnt+1142-1] == f"{synthetic}_TORUS_inj{inj_rate}_latency{latency}_numcpu{num_cpu}\n"
++                reception_rate[2][(synthetic,latency,inj_rate)] = extract_reception_rate(lines[1150+10*cnt-1])
++                print(reception_rate[2][(synthetic,latency,inj_rate)])
++                cnt+=1
++
++fig, axs = plt.subplots(2, 3, figsize=(16, 12))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    for j, latency in enumerate(latencies):
++        ax = axs[i, j]  # 选择正确的子图
++        # for method in [range(2)]:
++        for method in [1,2,0]: # 倒着颜色比较对
++            reception_rate_ = [reception_rate[method].get((synthetic, latency, inj_rate), None) for inj_rate in inj_rates]
++            line, = ax.plot(inj_rates, reception_rate_, marker='o', label=f'Method {method}')
++            # 只在第一个子图时记录句柄和标签
++            if i == 0 and j == 0:
++                lines.append(line)
++                if method == 0:
++                    label = "Fully Adapt"
++                elif method == 1:
++                    label = "Hypercube_*-channel"
++                elif method == 2:
++                    label = "3D Torus_*-channel"
++                labels.append(label)
++        
++        ax.set_title(f'{synthetic}, link/router latency = {latency}')
++        ax.set_xlabel('Injection Rate')
++        ax.set_ylabel('Reception Rate')
++        ax.set_ylim(0, 1.05)
++        # 设置横轴刻度，只显示第4,8,12,16,20个数据点
++        selected_ticks = inj_rates[3:20:4]  # 选择第4,8,12,16,20个点
++        ax.set_xticks(selected_ticks)
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment3/figs/ex3.png")
++
+diff --git a/Experiment/New_Experiment/Experiment3/plot.py b/Experiment/New_Experiment/Experiment3/plot.py
+new file mode 100644
+index 0000000000..22d102a936
+--- /dev/null
++++ b/Experiment/New_Experiment/Experiment3/plot.py
+@@ -0,0 +1,105 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))/2# 2是tick和cycle的比例
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpus = [4, 16, 64]
++inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
++latency = ({},{},{},{})
++
++path = "Experiment/New_Experiment/Experiment1/result1.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                print(9*cnt+2-1)
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++    num_cpus = [16, 64]
++    for num_cpu in num_cpus:
++        for synthetic in synthetics:
++            for inj_rate in inj_rates:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[2][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++
++path = "Experiment/New_Experiment/Experiment3/result3.txt" # 8^2
++num_cpu=64
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            print(lines[9*cnt+2-1])
++            print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
++            print(9*cnt+2-1)
++            # breakpoint()
++            assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
++            latency[3][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++            print(latency[3][(synthetic,num_cpu,inj_rate)])
++            cnt+=1
++
++num_cpu=64
++fig, axs = plt.subplots(2, 4, figsize=(16, 8))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    ax = axs[i//4,i%4]  # 选择正确的子图
++    for method in [0,1,3]:
++        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        # 只在第一个子图时记录句柄和标签
++        if i == 0:
++            lines.append(line)
++            if method == 0:
++                label = "Hypercube_*-channel (6-dim 2-ary) Torus"
++            elif method == 1:
++                label = "3-dim 4-ary Torus_*-channel"
++            elif method == 3:
++                label = "2-dim 8-ary Torus_*-channel"
++            labels.append(label)
++    
++    ax.set_title(f'{synthetic}, CPU={num_cpu}')
++    ax.set_xlabel('Injection Rate')
++    ax.set_ylabel('Latency(cycle)')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment3/figs/ex3.png")
+diff --git a/Experiment/New_Experiment/Experiment4/plot.py b/Experiment/New_Experiment/Experiment4/plot.py
+new file mode 100644
+index 0000000000..39d333179c
+--- /dev/null
++++ b/Experiment/New_Experiment/Experiment4/plot.py
+@@ -0,0 +1,106 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))/2# 2是tick和cycle的比例
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpu = 64
++inj_rates = [0.2, 0.4, 0.6, 0.8, 1.0]
++num_star_channels = [2,4,6,8,10,12,14,16]
++latency = ({},{})
++
++path = "Experiment/New_Experiment/Experiment4/result4.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    current_line = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_star_channel in num_star_channels:
++                # print(lines[9*cnt+2-1])
++                # print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # print(9*cnt+2-1)
++                # # breakpoint()
++                while lines[current_line] != f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n": #其实是Cube
++                    # print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n")
++                    # print(lines[current_line])
++                    # breakpoint()
++                    current_line += 1
++                if lines[current_line+2][0]=='p':
++                    cnt += 1
++                    latency[0][(synthetic,num_star_channel,inj_rate)] = extract_latency(lines[current_line+6])
++                    print(lines[current_line],lines[current_line+6],latency[0][(synthetic,num_star_channel,inj_rate)])
++                # assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++    print(cnt)
++    num_star_channels = [2,4,6,8]
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_star_channel in num_star_channels:
++                # print(lines[9*cnt+2-1])
++                # print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                # print(9*cnt+2-1)
++                # # breakpoint()
++                while lines[current_line] != f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n": #其实是Cube
++                    # print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numsc{num_star_channel}_numcpu64\n")
++                    # print(lines[current_line])
++                    # breakpoint()
++                    current_line += 1
++                if lines[current_line+2][0]=='p':
++                    cnt += 1
++                    latency[1][(synthetic,num_star_channel,inj_rate)] = extract_latency(lines[current_line+6])
++                    print(lines[current_line],lines[current_line+6],latency[0][(synthetic,num_star_channel,inj_rate)])
++                # assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++    print(cnt)
++
++
++fig, axs = plt.subplots(4, 4, figsize=(16, 12))
++fig.subplots_adjust(hspace=0.5, wspace=0.5)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++num_star_channels = [2,4,6,8,10,12,14,16]
++for i, synthetic in enumerate(synthetics):
++    ax = axs[i//4,i%4]  # 选择正确的子图
++    for inj_rate in inj_rates:
++        latencies = [latency[0].get((synthetic, num_star_channel, inj_rate), None) for num_star_channel in num_star_channels]
++        line, = ax.plot(num_star_channels, latencies, marker='o')
++        # 只在第一个子图时记录句柄和标签
++        if i == 0:
++            lines.append(line)
++            label = f"inj_rate = {inj_rate}"
++            labels.append(label)
++    ax.set_title(f'{synthetic}')
++    ax.set_xlabel('num-star-channel')
++    ax.set_ylabel('latency(cycle)')
++
++# 遍历synthetics和num_cpus来填充每个小图
++num_star_channels = [4,8,12,16]
++for i, synthetic in enumerate(synthetics):
++    ax = axs[2+i//4,i%4]  # 选择正确的子图
++    for inj_rate in inj_rates:
++        latencies = [latency[1].get((synthetic, num_star_channel/2, inj_rate), None) for num_star_channel in num_star_channels]
++        line, = ax.plot(num_star_channels, latencies, marker='o')
++        # 只在第一个子图时记录句柄和标签
++        # if i == 0:
++        #     lines.append(line)
++        #     label = f"inj_rate = {inj_rate}"
++        #     labels.append(label)
++    # ax.set_title(f'{synthetic}')
++    ax.set_title(f'{synthetic}')
++    ax.set_xlabel('num-star-channel')
++    ax.set_ylabel('latency(cycle)')
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=5)
++fig.text(0.06, 0.75, '6-Hypercube', va='center', rotation='vertical', fontsize=12, weight='bold')
++fig.text(0.06, 0.25, '3-dim 4-ary torus', va='center', rotation='vertical', fontsize=12, weight='bold')
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/New_Experiment/Experiment4/figs/ex4.png")
+diff --git a/Experiment/torus/Experiment1/plot1.py b/Experiment/torus/Experiment1/plot1.py
+new file mode 100644
+index 0000000000..57697bc491
+--- /dev/null
++++ b/Experiment/torus/Experiment1/plot1.py
+@@ -0,0 +1,131 @@
++import matplotlib.pyplot as plt
++import re
++
++def extract_latency(line):
++    match = re.search(r'average_packet_latency\s*=\s*([\d\.]+)', line)
++    if match:
++        return float(match.group(1))
++    else:
++        return None
++
++synthetics = ["shuffle","transpose","tornado","neighbor","uniform_random","bit_complement","bit_reverse","bit_rotation"]
++num_cpus = [4, 16, 64, 256]
++inj_rates = [0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
++latency = ({},{},{})
++
++path = "Experiment/Experiment1/result_new_hypercube_new.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt+2-1])
++                print(f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n")
++                print(9*cnt+2-1)
++                # breakpoint()
++                assert lines[9*cnt+2-1] == f"{synthetic}_STAR_inj{inj_rate}_numcpu{num_cpu}\n"
++                # breakpoint()
++                latency[0][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++                print(latency[0][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++path = "Experiment/Experiment1/result_new_mesh.txt"
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            for num_cpu in num_cpus:
++                print(lines[9*cnt])
++                print(f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n")
++                # breakpoint()
++                assert lines[9*cnt] == f"{synthetic}_routingalg1_inj{inj_rate}_numcpu{num_cpu}\n"
++                latency[1][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+7-1])
++                print(latency[1][(synthetic,num_cpu,inj_rate)])
++                cnt+=1
++
++path = "Experiment/torus/Experiment1/result1.txt"
++num_cpu=64
++with open(path, 'r') as file:
++    lines = file.readlines()
++    cnt = 0
++    for synthetic in synthetics:
++        for inj_rate in inj_rates:
++            print(lines[9*cnt+2-1])
++            print(f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n")
++            # breakpoint()
++            assert lines[9*cnt+2-1] == f"{synthetic}_TORUSSTAR_inj{inj_rate}_numcpu{num_cpu}\n"
++            latency[2][(synthetic,num_cpu,inj_rate)] = extract_latency(lines[9*cnt+8-1])
++            print(latency[2][(synthetic,num_cpu,inj_rate)])
++            cnt+=1
++
++
++# fig, axs = plt.subplots(8, 3, figsize=(18, 18))
++# fig.subplots_adjust(hspace=0.8, wspace=0.4)
++
++# lines = []
++# labels = []
++# num_cpus = [16,64,256] # 4不要了
++
++# # 遍历synthetics和num_cpus来填充每个小图
++# for i, synthetic in enumerate(synthetics):
++#     for j, num_cpu in enumerate(num_cpus):
++#         ax = axs[i, j]  # 选择正确的子图
++#         for method in range(2):
++#             latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++#             line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++#             # 只在第一个子图时记录句柄和标签
++#             if i == 0 and j == 1:
++#                 lines.append(line)
++#                 if method == 0:
++#                     label = "Hypercube_*-channel"
++#                 elif method == 1:
++#                     label = "Mesh_XY"
++#                 labels.append(label)
++        
++#         ax.set_title(f'{synthetic}, CPU={num_cpu}')
++#         ax.set_xlabel('Injection Rate')
++#         ax.set_ylabel('Latency')
++
++# # 在整个图中添加一个全局图例，并将图例放在图像之外
++# fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.07), ncol=2)
++
++# # 显示图像
++# plt.show()
++# plt.savefig("Experiment/Experiment1/figs/new.png", bbox_inches='tight')
++
++fig, axs = plt.subplots(2, 4, figsize=(16, 8))
++fig.subplots_adjust(hspace=0.5, wspace=0.4)
++
++lines = []
++labels = []
++
++# 遍历synthetics和num_cpus来填充每个小图
++for i, synthetic in enumerate(synthetics):
++    ax = axs[i//4,i%4]  # 选择正确的子图
++    for method in range(3):
++        latencies = [latency[method].get((synthetic, num_cpu, inj_rate), None) for inj_rate in inj_rates]
++        line, = ax.plot(inj_rates, latencies, marker='o', label=f'Method {method}')
++        # 只在第一个子图时记录句柄和标签
++        if i == 0:
++            lines.append(line)
++            if method == 0:
++                label = "Hypercube_*-channel"
++            elif method == 1:
++                label = "Mesh_XY"
++            elif method == 2:
++                label = "3-dim 4-ary Torus_*-channel"
++            labels.append(label)
++    
++    ax.set_title(f'{synthetic}, CPU={num_cpu}')
++    ax.set_xlabel('Injection Rate')
++    ax.set_ylabel('Latency')
++
++# 在整个图中添加一个全局图例
++fig.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, 0.05), ncol=3)
++
++# 显示图像
++plt.show()
++plt.savefig("Experiment/torus/figs/fig1.png")
++
+diff --git a/Experiment/torus/figs/fig1.png b/Experiment/torus/figs/fig1.png
+new file mode 100644
+index 0000000000000000000000000000000000000000..7111b2000a2fc9a11a68a7b65f81a47453e79617
+GIT binary patch
+literal 143908
+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%0D~*UibI8
+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%0DDoSOoCwPbl7qFfCR4w
+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
+EFE1K3$^ZZW
+
+literal 0
+HcmV?d00001
+
+diff --git a/changes.patch b/changes.patch
+new file mode 100644
+index 0000000000..e69de29bb2
+diff --git a/configs/example/garnet_synth_traffic.py b/configs/example/garnet_synth_traffic.py
+index 1da82e11b8..73224542eb 100644
+--- a/configs/example/garnet_synth_traffic.py
++++ b/configs/example/garnet_synth_traffic.py
+@@ -57,6 +57,7 @@ parser.add_argument(
+         "neighbor",
+         "shuffle",
+         "transpose",
++        "custom",
+     ],
+ )
+ 
+@@ -173,7 +174,8 @@ root = Root(full_system=False, system=system)
+ root.system.mem_mode = "timing"
+ 
+ # Not much point in this being higher than the L1 latency
+-m5.ticks.setGlobalFrequency("1ps")
++# m5.ticks.setGlobalFrequency("1ps")
++m5.ticks.setGlobalFrequency("2GHz")
+ 
+ # instantiate configuration
+ m5.instantiate()
+diff --git a/configs/network/Network.py b/configs/network/Network.py
+index a5334741c0..425f6f9cf7 100644
+--- a/configs/network/Network.py
++++ b/configs/network/Network.py
+@@ -47,6 +47,18 @@ def define_options(parser):
+         default=0,
+         help="the number of rows in the mesh topology",
+     )
++    parser.add_argument(
++        "--num-dim",
++        type=int,
++        default=2,
++        help="the number of dimensions in the torus tology",
++    )
++    parser.add_argument(
++        "--num-ary",
++        type=int,
++        default=2,
++        help="the number of ary in the torus tology",
++    )
+     parser.add_argument(
+         "--network",
+         default="simple",
+@@ -87,6 +99,13 @@ def define_options(parser):
+         help="""number of virtual channels per virtual network
+             inside garnet network.""",
+     )
++    parser.add_argument(
++        "--num-star-channel",
++        action="store",
++        type=int,
++        default=1,
++        help="""number of star channels for hypercube""",
++    )
+     parser.add_argument(
+         "--routing-algorithm",
+         action="store",
+@@ -165,7 +184,10 @@ def init_network(options, network, InterfaceClass):
+ 
+     if options.network == "garnet":
+         network.num_rows = options.mesh_rows
++        network.num_dim = options.num_dim
++        network.num_ary = options.num_ary
+         network.vcs_per_vnet = options.vcs_per_vnet
++        network.num_star_channel = options.num_star_channel
+         network.ni_flit_size = options.link_width_bits / 8
+         network.routing_algorithm = options.routing_algorithm
+         network.garnet_deadlock_threshold = options.garnet_deadlock_threshold
+diff --git a/configs/topologies/Cube.py b/configs/topologies/Cube.py
+new file mode 100644
+index 0000000000..eb996704ab
+--- /dev/null
++++ b/configs/topologies/Cube.py
+@@ -0,0 +1,129 @@
++from m5.params import *
++from m5.objects import *
++
++from common import FileSystemConfig
++
++from topologies.BaseTopology import SimpleTopology
++
++# Creates a generic Mesh assuming an equal number of cache
++# and directory controllers.
++# XY routing is enforced (using link weights)
++# to guarantee deadlock freedom.
++
++
++class Cube(SimpleTopology):
++    description = "Cube"
++
++    def __init__(self, controllers):
++        self.nodes = controllers
++
++    # Makes a generic mesh
++    # assuming an equal number of cache and directory cntrls
++
++    def makeTopology(self, options, network, IntLink, ExtLink, Router):
++        nodes = self.nodes
++
++        num_routers = options.num_cpus
++
++        # assert num_routers == len(nodes), "Number of nodes is {} and number of routers is {}".format(
++        #     len(nodes), num_routers
++        # )
++
++        # default values for link latency and router latency.
++        # Can be over-ridden on a per link/router basis
++        link_latency = options.link_latency  # used by simple and garnet
++        router_latency = options.router_latency  # only used by garnet
++
++        # Create the routers in the mesh
++        routers = [
++            Router(router_id=i, latency=router_latency)
++            for i in range(num_routers)
++        ]
++        network.routers = routers
++
++        # link counter to set unique link ids
++        link_count = 0
++
++        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
++
++        # Create the routers in the mesh
++        routers = [
++            Router(router_id=i, latency=router_latency)
++            for i in range(num_routers)
++        ]
++        network.routers = routers
++
++        # link counter to set unique link ids
++        link_count = 0
++
++        # Add all but the remainder nodes to the list of nodes to be uniformly
++        # distributed across the network.
++        network_nodes = []
++        remainder_nodes = []
++        for node_index in range(len(nodes)):
++            if node_index < (len(nodes) - remainder):
++                network_nodes.append(nodes[node_index])
++            else:
++                remainder_nodes.append(nodes[node_index])
++
++        # Connect each node to the appropriate router
++        ext_links = []
++        for (i, n) in enumerate(network_nodes):
++            cntrl_level, router_id = divmod(i, num_routers)
++            assert cntrl_level < cntrls_per_router
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=n,
++                    int_node=routers[router_id],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        # Connect the remainding nodes to router 0.  These should only be
++        # DMA nodes.
++        for (i, node) in enumerate(remainder_nodes):
++            assert node.type == "DMA_Controller"
++            assert i < remainder
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=node,
++                    int_node=routers[0],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        network.ext_links = ext_links
++
++        # Create the mesh links.
++        int_links = []
++
++        #assert the number of routers is power of 2
++        assert num_routers & (num_routers - 1) == 0, "Number of routers is not a power of 2"
++        import math
++        length = int(math.log(num_routers, 2))
++
++        # Create the adjacent links
++        for i in range(num_routers):
++            for j in range(length):
++                dest = i ^ (1 << j)
++                # most significant bit first
++                int_links.append(
++                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
++                    src_outport="msb {}".format(j),
++                    dst_inport="msb {}".format(j)
++                    )
++                )
++                link_count += 1
++
++        network.int_links = int_links
++        print("successfully made topology")
++    # Register nodes with filesystem
++    def registerTopology(self, options):
++        for i in range(options.num_cpus):
++            FileSystemConfig.register_node(
++                [i], MemorySize(options.mem_size) // options.num_cpus, i
++            )
+diff --git a/configs/topologies/Ring.py b/configs/topologies/Ring.py
+new file mode 100644
+index 0000000000..69d2d49db6
+--- /dev/null
++++ b/configs/topologies/Ring.py
+@@ -0,0 +1,201 @@
++# Copyright (c) 2010 Advanced Micro Devices, Inc.
++#               2016 Georgia Institute of Technology
++# All rights reserved.
++#
++# Redistribution and use in source and binary forms, with or without
++# modification, are permitted provided that the following conditions are
++# met: redistributions of source code must retain the above copyright
++# notice, this list of conditions and the following disclaimer;
++# redistributions in binary form must reproduce the above copyright
++# notice, this list of conditions and the following disclaimer in the
++# documentation and/or other materials provided with the distribution;
++# neither the name of the copyright holders nor the names of its
++# contributors may be used to endorse or promote products derived from
++# this software without specific prior written permission.
++#
++# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
++# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
++# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
++# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
++# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
++# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
++# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
++# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
++# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
++# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
++# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
++
++from m5.params import *
++from m5.objects import *
++
++from common import FileSystemConfig
++
++from topologies.BaseTopology import SimpleTopology
++
++# Creates a generic Mesh assuming an equal number of cache
++# and directory controllers.
++# XY routing is enforced (using link weights)
++# to guarantee deadlock freedom.
++
++
++class Ring(SimpleTopology):
++    description = "Ring"
++
++    def __init__(self, controllers):
++        self.nodes = controllers
++
++    # Makes a generic mesh
++    # assuming an equal number of cache and directory cntrls
++
++    def makeTopology(self, options, network, IntLink, ExtLink, Router):
++        nodes = self.nodes
++
++        num_routers = options.num_cpus
++
++        # assert num_routers == len(nodes), "Number of nodes is {} and number of routers is {}".format(
++        #     len(nodes), num_routers
++        # )
++
++        # default values for link latency and router latency.
++        # Can be over-ridden on a per link/router basis
++        link_latency = options.link_latency  # used by simple and garnet
++        router_latency = options.router_latency  # only used by garnet
++
++        # Create the routers in the mesh
++        routers = [
++            Router(router_id=i, latency=router_latency)
++            for i in range(num_routers)
++        ]
++        network.routers = routers
++
++        # link counter to set unique link ids
++        link_count = 0
++
++        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
++
++        # Create the routers in the mesh
++        routers = [
++            Router(router_id=i, latency=router_latency)
++            for i in range(num_routers)
++        ]
++        network.routers = routers
++
++        # link counter to set unique link ids
++        link_count = 0
++
++        # Add all but the remainder nodes to the list of nodes to be uniformly
++        # distributed across the network.
++        network_nodes = []
++        remainder_nodes = []
++        for node_index in range(len(nodes)):
++            if node_index < (len(nodes) - remainder):
++                network_nodes.append(nodes[node_index])
++            else:
++                remainder_nodes.append(nodes[node_index])
++
++        # Connect each node to the appropriate router
++        ext_links = []
++        for (i, n) in enumerate(network_nodes):
++            cntrl_level, router_id = divmod(i, num_routers)
++            assert cntrl_level < cntrls_per_router
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=n,
++                    int_node=routers[router_id],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        # Connect the remainding nodes to router 0.  These should only be
++        # DMA nodes.
++        for (i, node) in enumerate(remainder_nodes):
++            assert node.type == "DMA_Controller"
++            assert i < remainder
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=node,
++                    int_node=routers[0],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        network.ext_links = ext_links
++
++        # # Connect each node to the appropriate router
++        # ext_links = []
++        # for (i, n) in enumerate(self.nodes):
++        #     ext_links.append(
++        #         ExtLink(
++        #             link_id=link_count,
++        #             ext_node=n,
++        #             int_node=routers[i],
++        #             latency=link_latency,
++        #         )
++        #     )
++        #     link_count += 1
++
++        # network.ext_links = ext_links
++
++        # Create the mesh links.
++        int_links = []
++
++        # Create the adjacent links
++        for i in range(num_routers):
++            if not i==num_routers-1:
++                int_links.append(
++                    IntLink(
++                        link_id=link_count,
++                        src_node=routers[i],
++                        dst_node=routers[(i + 1) % num_routers],
++                        latency=link_latency,
++                        weight=1,
++                    )
++                )
++            else:
++                # int_links.append(
++                #     IntLink(
++                #         link_id=link_count,
++                #         src_node=routers[i],
++                #         dst_node=routers[(i + 1) % num_routers],
++                #         latency=link_latency,
++                #         weight=100,
++                #     )
++                # )
++                link_count -= 1
++            link_count += 1
++
++        for i in range(num_routers):
++            if not i==0:
++                int_links.append(
++                    IntLink(
++                        link_id=link_count,
++                        src_node=routers[i],
++                        dst_node=routers[(i - 1) % num_routers],
++                        latency=link_latency,
++                        weight=1,
++                    )
++                )
++            else:
++                # int_links.append(
++                #     IntLink(
++                #         link_id=link_count,
++                #         src_node=routers[i],
++                #         dst_node=routers[(i - 1) % num_routers],
++                #         latency=link_latency,
++                #         weight=100,
++                #     )
++                # )
++                link_count -= 1
++            link_count += 1
++
++        network.int_links = int_links
++    # Register nodes with filesystem
++    def registerTopology(self, options):
++        for i in range(options.num_cpus):
++            FileSystemConfig.register_node(
++                [i], MemorySize(options.mem_size) // options.num_cpus, i
++            )
+diff --git a/configs/topologies/Torus.py b/configs/topologies/Torus.py
+new file mode 100644
+index 0000000000..5b44a40b4d
+--- /dev/null
++++ b/configs/topologies/Torus.py
+@@ -0,0 +1,147 @@
++from m5.params import *
++from m5.objects import *
++
++from common import FileSystemConfig
++
++from topologies.BaseTopology import SimpleTopology
++
++# Creates a generic Mesh assuming an equal number of cache
++# and directory controllers.
++# XY routing is enforced (using link weights)
++# to guarantee deadlock freedom.
++
++
++class Torus(SimpleTopology):
++    description = "Cube"
++
++    def __init__(self, controllers):
++        self.nodes = controllers
++
++    # Makes a generic mesh
++    # assuming an equal number of cache and directory cntrls
++
++    def makeTopology(self, options, network, IntLink, ExtLink, Router):
++        nodes = self.nodes
++
++        num_routers = options.num_cpus
++        num_dim = options.num_dim
++        num_ary = options.num_ary
++        assert num_ary > 2 # otherwise mesh
++
++        link_latency = options.link_latency  # used by simple and garnet
++        router_latency = options.router_latency  # only used by garnet
++
++        cntrls_per_router, remainder = divmod(len(nodes), num_routers)
++
++        # Create the routers in the mesh
++        routers = [
++            Router(router_id=i, latency=router_latency)
++            for i in range(num_routers)
++        ]
++        network.routers = routers
++
++        # link counter to set unique link ids
++        link_count = 0
++
++        # Add all but the remainder nodes to the list of nodes to be uniformly
++        # distributed across the network.
++        network_nodes = []
++        remainder_nodes = []
++        for node_index in range(len(nodes)):
++            if node_index < (len(nodes) - remainder):
++                network_nodes.append(nodes[node_index])
++            else:
++                remainder_nodes.append(nodes[node_index])
++
++        # Connect each node to the appropriate router
++        ext_links = []
++        for (i, n) in enumerate(network_nodes):
++            cntrl_level, router_id = divmod(i, num_routers)
++            assert cntrl_level < cntrls_per_router
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=n,
++                    int_node=routers[router_id],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        # Connect the remainding nodes to router 0.  These should only be
++        # DMA nodes.
++        for (i, node) in enumerate(remainder_nodes):
++            assert node.type == "DMA_Controller"
++            assert i < remainder
++            ext_links.append(
++                ExtLink(
++                    link_id=link_count,
++                    ext_node=node,
++                    int_node=routers[0],
++                    latency=link_latency,
++                )
++            )
++            link_count += 1
++
++        network.ext_links = ext_links
++
++        # Create the mesh links.
++        int_links = []
++
++        #assert the number of routers is num_ary**num_dim
++        assert num_ary**num_dim == num_routers, " num_ary ^ num_dimis not equal to num_routers"
++
++        # # Create the adjacent links
++        # for i in range(num_routers):
++        #     for j in range(length):
++        #         dest = i ^ (1 << j)
++        #         # most significant bit first
++        #         int_links.append(
++        #             IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
++        #             src_outport="msb {}".format(j),
++        #             dst_inport="msb {}".format(j)
++        #             )
++        #         )
++        #         link_count += 1
++
++        # Create the adjacent links
++        # 只能祈祷...
++        for i in range(num_routers):
++            tmpi = i
++            pw = 1
++            for j in range(num_dim):
++                digit_j = tmpi % num_ary
++                tmpi //= num_ary
++
++                # plus:
++                dest = i - digit_j *pw + (digit_j+1)%num_ary * pw
++                print("plus",i,dest);
++                int_links.append(
++                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
++                    src_outport="plus {}".format(j),
++                    dst_inport="plus {}".format(j)
++                    )
++                )
++                link_count += 1
++
++                # plus:
++                dest = i - digit_j *pw + (digit_j+num_ary-1)%num_ary * pw
++                print("minus", i,dest);
++                int_links.append(
++                    IntLink(link_id=link_count, src_node=routers[i], dst_node=routers[dest], latency=link_latency, weight=1,
++                    src_outport="minus {}".format(j),
++                    dst_inport="minus {}".format(j)
++                    )
++                )
++                link_count += 1
++
++                pw = pw * num_ary
++
++        network.int_links = int_links
++        print("successfully made topology")
++    # Register nodes with filesystem
++    def registerTopology(self, options):
++        for i in range(options.num_cpus):
++            FileSystemConfig.register_node(
++                [i], MemorySize(options.mem_size) // options.num_cpus, i
++            )
+diff --git a/network_stats.txt b/network_stats.txt
+new file mode 100644
+index 0000000000..76a81a166c
+--- /dev/null
++++ b/network_stats.txt
+@@ -0,0 +1,289 @@
++
++shuffle_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639739                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4505.440500                       ((Tick/Count))
++average_packet_latency = 5505.440500                       ((Tick/Count))
++average_hops = 3.000699                       (Ratio)
++reception_rate = 0.099959                       ((Count/Cycle))
++shuffle_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278519                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4511.582151                       ((Tick/Count))
++average_packet_latency = 5511.582151                       ((Tick/Count))
++average_hops = 3.000431                       (Ratio)
++reception_rate = 0.199769                       ((Count/Cycle))
++shuffle_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197898                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4540.217668                       ((Tick/Count))
++average_packet_latency = 5540.217668                       ((Tick/Count))
++average_hops = 2.999711                       (Ratio)
++reception_rate = 0.499672                       ((Count/Cycle))
++shuffle_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393266                       (Count)
++average_packet_queueing_latency = 1000.000469                       ((Tick/Count))
++average_packet_network_latency = 4623.799401                       ((Tick/Count))
++average_packet_latency = 5623.799870                       ((Tick/Count))
++average_hops = 2.999991                       (Ratio)
++reception_rate = 0.998948                       ((Count/Cycle))
++transpose_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639742                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4507.707795                       ((Tick/Count))
++average_packet_latency = 5507.707795                       ((Tick/Count))
++average_hops = 3.003017                       (Ratio)
++reception_rate = 0.099960                       ((Count/Cycle))
++transpose_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278528                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4508.101113                       ((Tick/Count))
++average_packet_latency = 5508.101113                       ((Tick/Count))
++average_hops = 2.999313                       (Ratio)
++reception_rate = 0.199770                       ((Count/Cycle))
++transpose_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197897                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4515.289110                       ((Tick/Count))
++average_packet_latency = 5515.289110                       ((Tick/Count))
++average_hops = 2.998442                       (Ratio)
++reception_rate = 0.499671                       ((Count/Cycle))
++transpose_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393266                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4517.705113                       ((Tick/Count))
++average_packet_latency = 5517.705113                       ((Tick/Count))
++average_hops = 2.999941                       (Ratio)
++reception_rate = 0.998948                       ((Count/Cycle))
++tornado_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639744                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3751.509979                       ((Tick/Count))
++average_packet_latency = 4751.509979                       ((Tick/Count))
++average_hops = 2.249944                       (Ratio)
++reception_rate = 0.099960                       ((Count/Cycle))
++tornado_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278533                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3755.987917                       ((Tick/Count))
++average_packet_latency = 4755.987917                       ((Tick/Count))
++average_hops = 2.249819                       (Ratio)
++reception_rate = 0.199771                       ((Count/Cycle))
++tornado_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197920                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3787.613199                       ((Tick/Count))
++average_packet_latency = 4787.613199                       ((Tick/Count))
++average_hops = 2.249801                       (Ratio)
++reception_rate = 0.499675                       ((Count/Cycle))
++tornado_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393314                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3922.500600                       ((Tick/Count))
++average_packet_latency = 4922.500600                       ((Tick/Count))
++average_hops = 2.249999                       (Ratio)
++reception_rate = 0.998955                       ((Count/Cycle))
++neighbor_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639743                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3250.807746                       ((Tick/Count))
++average_packet_latency = 4250.807746                       ((Tick/Count))
++average_hops = 1.749937                       (Ratio)
++reception_rate = 0.099960                       ((Count/Cycle))
++neighbor_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278533                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3254.008696                       ((Tick/Count))
++average_packet_latency = 4254.008696                       ((Tick/Count))
++average_hops = 1.750465                       (Ratio)
++reception_rate = 0.199771                       ((Count/Cycle))
++neighbor_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197928                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3270.082378                       ((Tick/Count))
++average_packet_latency = 4270.082378                       ((Tick/Count))
++average_hops = 1.750361                       (Ratio)
++reception_rate = 0.499676                       ((Count/Cycle))
++neighbor_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393347                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 3312.491407                       ((Tick/Count))
++average_packet_latency = 4312.491407                       ((Tick/Count))
++average_hops = 1.750005                       (Ratio)
++reception_rate = 0.998960                       ((Count/Cycle))
++uniform_random_inj0.1
++======================
++packets_injected = 638983                       (Count)
++packets_received = 638956                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4532.288608                       ((Tick/Count))
++average_packet_latency = 5532.288608                       ((Tick/Count))
++average_hops = 3.001509                       (Ratio)
++reception_rate = 0.099837                       ((Count/Cycle))
++uniform_random_inj0.2
++======================
++packets_injected = 1278553                       (Count)
++packets_received = 1278490                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4565.050176                       ((Tick/Count))
++average_packet_latency = 5565.050176                       ((Tick/Count))
++average_hops = 3.002083                       (Ratio)
++reception_rate = 0.199764                       ((Count/Cycle))
++uniform_random_inj0.5
++======================
++packets_injected = 3198242                       (Count)
++packets_received = 3198080                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4668.785177                       ((Tick/Count))
++average_packet_latency = 5668.785177                       ((Tick/Count))
++average_hops = 3.000029                       (Ratio)
++reception_rate = 0.499700                       ((Count/Cycle))
++uniform_random_inj1.0
++======================
++packets_injected = 6393561                       (Count)
++packets_received = 6393208                       (Count)
++average_packet_queueing_latency = 1000.018926                       ((Tick/Count))
++average_packet_network_latency = 4955.762428                       ((Tick/Count))
++average_packet_latency = 5955.781354                       ((Tick/Count))
++average_hops = 2.999576                       (Ratio)
++reception_rate = 0.998939                       ((Count/Cycle))
++bit_complement_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639713                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 7503.817337                       ((Tick/Count))
++average_packet_latency = 8503.817337                       ((Tick/Count))
++average_hops = 6                       (Ratio)
++reception_rate = 0.099955                       ((Count/Cycle))
++bit_complement_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278480                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 7515.329141                       ((Tick/Count))
++average_packet_latency = 8515.329141                       ((Tick/Count))
++average_hops = 6                       (Ratio)
++reception_rate = 0.199763                       ((Count/Cycle))
++bit_complement_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197807                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 7604.534920                       ((Tick/Count))
++average_packet_latency = 8604.534920                       ((Tick/Count))
++average_hops = 6                       (Ratio)
++reception_rate = 0.499657                       ((Count/Cycle))
++bit_complement_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393025                       (Count)
++average_packet_queueing_latency = 1000.067965                       ((Tick/Count))
++average_packet_network_latency = 8601.966987                       ((Tick/Count))
++average_packet_latency = 9602.034952                       ((Tick/Count))
++average_hops = 6                       (Ratio)
++reception_rate = 0.998910                       ((Count/Cycle))
++bit_reverse_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639740                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4508.158783                       ((Tick/Count))
++average_packet_latency = 5508.158783                       ((Tick/Count))
++average_hops = 3.003480                       (Ratio)
++reception_rate = 0.099959                       ((Count/Cycle))
++bit_reverse_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278521                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4510.151182                       ((Tick/Count))
++average_packet_latency = 5510.151182                       ((Tick/Count))
++average_hops = 3.001379                       (Ratio)
++reception_rate = 0.199769                       ((Count/Cycle))
++bit_reverse_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197892                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4516.190822                       ((Tick/Count))
++average_packet_latency = 5516.190822                       ((Tick/Count))
++average_hops = 2.999275                       (Ratio)
++reception_rate = 0.499671                       ((Count/Cycle))
++bit_reverse_inj1.0
++======================
++packets_injected = 6393587                       (Count)
++packets_received = 6393267                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4517.401745                       ((Tick/Count))
++average_packet_latency = 5517.401745                       ((Tick/Count))
++average_hops = 2.999950                       (Ratio)
++reception_rate = 0.998948                       ((Count/Cycle))
++bit_rotation_inj0.1
++======================
++packets_injected = 639763                       (Count)
++packets_received = 639739                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4517.546218                       ((Tick/Count))
++average_packet_latency = 5517.546218                       ((Tick/Count))
++average_hops = 3.000699                       (Ratio)
++reception_rate = 0.099959                       ((Count/Cycle))
++bit_rotation_inj0.2
++======================
++packets_injected = 1278577                       (Count)
++packets_received = 1278519                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4534.884112                       ((Tick/Count))
++average_packet_latency = 5534.884112                       ((Tick/Count))
++average_hops = 3.000431                       (Ratio)
++reception_rate = 0.199769                       ((Count/Cycle))
++bit_rotation_inj0.5
++======================
++packets_injected = 3198054                       (Count)
++packets_received = 3197898                       (Count)
++average_packet_queueing_latency = 1000                       ((Tick/Count))
++average_packet_network_latency = 4594.747863                       ((Tick/Count))
++average_packet_latency = 5594.747863                       (
\ No newline at end of file
diff --git a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
index fc3d620414..9fce045bd5 100644
--- a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
+++ b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.cc
@@ -236,6 +236,10 @@ GarnetSyntheticTraffic::generatePkt()
         dest_x = (src_x + (int) ceil(radix/2) - 1) % radix;
         dest_y = src_y;
         destination = dest_y*radix + dest_x;
+    } else if (traffic == CUSTOM_) {
+        // Custom traffic pattern
+        destination = random_mt.random<unsigned>(std::min(id+1, num_destinations-1), num_destinations-1);
+        // fatal("Custom traffic pattern not implemented yet!\n");
     }
     else {
         fatal("Unknown Traffic Type: %s!\n", traffic);
@@ -334,6 +338,7 @@ GarnetSyntheticTraffic::initTrafficType()
     trafficStringToEnum["tornado"] = TORNADO_;
     trafficStringToEnum["transpose"] = TRANSPOSE_;
     trafficStringToEnum["uniform_random"] = UNIFORM_RANDOM_;
+    trafficStringToEnum["custom"] = CUSTOM_;
 }
 
 void
diff --git a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.hh b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.hh
index def3ed29a2..f8f76fd4d3 100644
--- a/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.hh
+++ b/src/cpu/testers/garnet_synthetic_traffic/GarnetSyntheticTraffic.hh
@@ -51,6 +51,7 @@ enum TrafficType {BIT_COMPLEMENT_ = 0,
                   TORNADO_ = 5,
                   TRANSPOSE_ = 6,
                   UNIFORM_RANDOM_ = 7,
+                  CUSTOM_ = 8,
                   NUM_TRAFFIC_PATTERNS_};
 
 class Packet;
diff --git a/src/mem/ruby/SConsopts b/src/mem/ruby/SConsopts
index f26b6d05f8..a087fbd73a 100644
--- a/src/mem/ruby/SConsopts
+++ b/src/mem/ruby/SConsopts
@@ -33,4 +33,4 @@ def add_protocols_var():
 AfterSConsopts(add_protocols_var)
 
 sticky_vars.Add(('NUMBER_BITS_PER_SET', 'Max elements in set (default 64)',
-                 64))
+                 1024))
diff --git a/src/mem/ruby/network/garnet/CommonTypes.hh b/src/mem/ruby/network/garnet/CommonTypes.hh
index 0bf6f3680d..b0b73ed93c 100644
--- a/src/mem/ruby/network/garnet/CommonTypes.hh
+++ b/src/mem/ruby/network/garnet/CommonTypes.hh
@@ -32,6 +32,7 @@
 #define __MEM_RUBY_NETWORK_GARNET_0_COMMONTYPES_HH__
 
 #include "mem/ruby/common/NetDest.hh"
+#include <set>
 
 namespace gem5
 {
@@ -50,8 +51,31 @@ enum VC_state_type {IDLE_, VC_AB_, ACTIVE_, NUM_VC_STATE_TYPE_};
 enum VNET_type {CTRL_VNET_, DATA_VNET_, NULL_VNET_, NUM_VNET_TYPE_};
 enum flit_stage {I_, VA_, SA_, ST_, LT_, NUM_FLIT_STAGE_};
 enum link_type { EXT_IN_, EXT_OUT_, INT_, NUM_LINK_TYPES_ };
-enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, CUSTOM_ = 2,
+enum RoutingAlgorithm { TABLE_ = 0, XY_ = 1, CUSTOM_ = 2, DOR_ = 3, RANDOM_DIMENSION_ = 4, STAR_CHANNEL_ = 5, 
                         NUM_ROUTING_ALGORITHM_};
+enum Dor_type { STARPLUS_ , STARMINUS_ , COMMON_, DEVICE_, NUM_DOR_TYPE_};
+enum Star_type {STAR0_, STAR1_, NONSTAR_, STARDEVICE_};
+
+// std::ostream& operator<<(std::ostream& os, Star_type star) {
+//     switch (star) {
+//         case STAR0_:
+//             os << "STAR0_";
+//             break;
+//         case STAR1_:
+//             os << "STAR1_";
+//             break;
+//         case NONSTAR_:
+//             os << "NONSTAR_";
+//             break;
+//         case STARDEVICE_:
+//             os << "STARDEVICE_";
+//             break;
+//         default:
+//             os << "Unknown";
+//             break;
+//     }
+//     return os;
+// }
 
 struct RouteInfo
 {
@@ -70,6 +94,7 @@ struct RouteInfo
     int dest_ni;
     int dest_router;
     int hops_traversed;
+    std::set<int> have_wrapped;
 };
 
 #define INFINITE_ 10000
diff --git a/src/mem/ruby/network/garnet/GarnetLink.py b/src/mem/ruby/network/garnet/GarnetLink.py
index 3cc44e4614..3b6daa0c16 100644
--- a/src/mem/ruby/network/garnet/GarnetLink.py
+++ b/src/mem/ruby/network/garnet/GarnetLink.py
@@ -45,6 +45,7 @@ class NetworkLink(ClockedObject):
     vcs_per_vnet = Param.Int(
         Parent.vcs_per_vnet, "virtual channels per virtual network"
     )
+    num_star_channel = Param.Int(Parent.num_star_channel, "number of star channels")
     virt_nets = Param.Int(
         Parent.number_of_virtual_networks, "number of virtual networks"
     )
diff --git a/src/mem/ruby/network/garnet/GarnetNetwork.cc b/src/mem/ruby/network/garnet/GarnetNetwork.cc
index 57922698e0..fa6bf81a5e 100644
--- a/src/mem/ruby/network/garnet/GarnetNetwork.cc
+++ b/src/mem/ruby/network/garnet/GarnetNetwork.cc
@@ -65,6 +65,9 @@ GarnetNetwork::GarnetNetwork(const Params &p)
     : Network(p)
 {
     m_num_rows = p.num_rows;
+    m_num_dim = p.num_dim;
+    m_num_ary = p.num_ary;
+    // std::cout<<"p.num_ary"<<p.num_ary<<std::endl;
     m_ni_flit_size = p.ni_flit_size;
     m_max_vcs_per_vnet = 0;
     m_buffers_per_data_vc = p.buffers_per_data_vc;
@@ -392,6 +395,7 @@ GarnetNetwork::regStats()
         .name(name() + ".packets_received")
         .flags(statistics::pdf | statistics::total | statistics::nozero |
             statistics::oneline)
+        .unit(statistics::units::Count::get())
         ;
 
     m_packets_injected
@@ -399,18 +403,21 @@ GarnetNetwork::regStats()
         .name(name() + ".packets_injected")
         .flags(statistics::pdf | statistics::total | statistics::nozero |
             statistics::oneline)
+        .unit(statistics::units::Count::get())
         ;
 
     m_packet_network_latency
         .init(m_virtual_networks)
         .name(name() + ".packet_network_latency")
         .flags(statistics::oneline)
+        .unit(statistics::units::Tick::get())
         ;
 
     m_packet_queueing_latency
         .init(m_virtual_networks)
         .name(name() + ".packet_queueing_latency")
         .flags(statistics::oneline)
+        .unit(statistics::units::Tick::get())
         ;
 
     for (int i = 0; i < m_virtual_networks; i++) {
@@ -422,28 +429,33 @@ GarnetNetwork::regStats()
 
     m_avg_packet_vnet_latency
         .name(name() + ".average_packet_vnet_latency")
-        .flags(statistics::oneline);
+        .flags(statistics::oneline)
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_packet_vnet_latency =
         m_packet_network_latency / m_packets_received;
 
     m_avg_packet_vqueue_latency
         .name(name() + ".average_packet_vqueue_latency")
-        .flags(statistics::oneline);
+        .flags(statistics::oneline)
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_packet_vqueue_latency =
         m_packet_queueing_latency / m_packets_received;
 
     m_avg_packet_network_latency
-        .name(name() + ".average_packet_network_latency");
+        .name(name() + ".average_packet_network_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_packet_network_latency =
         sum(m_packet_network_latency) / sum(m_packets_received);
 
     m_avg_packet_queueing_latency
-        .name(name() + ".average_packet_queueing_latency");
+        .name(name() + ".average_packet_queueing_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_packet_queueing_latency
         = sum(m_packet_queueing_latency) / sum(m_packets_received);
 
     m_avg_packet_latency
-        .name(name() + ".average_packet_latency");
+        .name(name() + ".average_packet_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_packet_latency
         = m_avg_packet_network_latency + m_avg_packet_queueing_latency;
 
@@ -453,6 +465,7 @@ GarnetNetwork::regStats()
         .name(name() + ".flits_received")
         .flags(statistics::pdf | statistics::total | statistics::nozero |
             statistics::oneline)
+        .unit(statistics::units::Count::get())
         ;
 
     m_flits_injected
@@ -460,18 +473,21 @@ GarnetNetwork::regStats()
         .name(name() + ".flits_injected")
         .flags(statistics::pdf | statistics::total | statistics::nozero |
             statistics::oneline)
+        .unit(statistics::units::Count::get())
         ;
 
     m_flit_network_latency
         .init(m_virtual_networks)
         .name(name() + ".flit_network_latency")
         .flags(statistics::oneline)
+        .unit(statistics::units::Tick::get())
         ;
 
     m_flit_queueing_latency
         .init(m_virtual_networks)
         .name(name() + ".flit_queueing_latency")
         .flags(statistics::oneline)
+        .unit(statistics::units::Tick::get())
         ;
 
     for (int i = 0; i < m_virtual_networks; i++) {
@@ -483,51 +499,68 @@ GarnetNetwork::regStats()
 
     m_avg_flit_vnet_latency
         .name(name() + ".average_flit_vnet_latency")
-        .flags(statistics::oneline);
+        .flags(statistics::oneline)
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_flit_vnet_latency = m_flit_network_latency / m_flits_received;
 
     m_avg_flit_vqueue_latency
         .name(name() + ".average_flit_vqueue_latency")
-        .flags(statistics::oneline);
+        .flags(statistics::oneline)
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_flit_vqueue_latency =
         m_flit_queueing_latency / m_flits_received;
 
     m_avg_flit_network_latency
-        .name(name() + ".average_flit_network_latency");
+        .name(name() + ".average_flit_network_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_flit_network_latency =
         sum(m_flit_network_latency) / sum(m_flits_received);
 
     m_avg_flit_queueing_latency
-        .name(name() + ".average_flit_queueing_latency");
+        .name(name() + ".average_flit_queueing_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_flit_queueing_latency =
         sum(m_flit_queueing_latency) / sum(m_flits_received);
 
     m_avg_flit_latency
-        .name(name() + ".average_flit_latency");
+        .name(name() + ".average_flit_latency")
+        .unit(statistics::units::Rate<statistics::units::Tick, statistics::units::Count>::get());
     m_avg_flit_latency =
         m_avg_flit_network_latency + m_avg_flit_queueing_latency;
 
 
     // Hops
-    m_avg_hops.name(name() + ".average_hops");
+    m_avg_hops.name(name() + ".average_hops")
+    .unit(statistics::units::Ratio::get());
     m_avg_hops = m_total_hops / sum(m_flits_received);
 
     // Links
     m_total_ext_in_link_utilization
-        .name(name() + ".ext_in_link_utilization");
+        .name(name() + ".ext_in_link_utilization")
+        .unit(statistics::units::Ratio::get());
     m_total_ext_out_link_utilization
-        .name(name() + ".ext_out_link_utilization");
+        .name(name() + ".ext_out_link_utilization")
+        .unit(statistics::units::Ratio::get());
     m_total_int_link_utilization
-        .name(name() + ".int_link_utilization");
+        .name(name() + ".int_link_utilization")
+        .unit(statistics::units::Ratio::get());
     m_average_link_utilization
-        .name(name() + ".avg_link_utilization");
+        .name(name() + ".avg_link_utilization")
+        .unit(statistics::units::Ratio::get());
     m_average_vc_load
         .init(m_virtual_networks * m_max_vcs_per_vnet)
         .name(name() + ".avg_vc_load")
         .flags(statistics::pdf | statistics::total | statistics::nozero |
             statistics::oneline)
+        .unit(statistics::units::Ratio::get())
         ;
 
+    m_reception_rate
+        .name(name() + ".reception_rate")
+        .precision(6)
+        .unit(statistics::units::Rate<statistics::units::Count, statistics::units::Cycle>::get());
+    m_reception_rate = sum(m_packets_received) / getNumRouters() / m_total_cycles * 2;
+
     // Traffic distribution
     for (int source = 0; source < m_routers.size(); ++source) {
         m_data_traffic_distribution.push_back(
@@ -555,6 +588,7 @@ GarnetNetwork::collateStats()
 {
     RubySystem *rs = params().ruby_system;
     double time_delta = double(curCycle() - rs->getStartCycle());
+    Cycles cycle_delta = (curCycle() - rs->getStartCycle());
 
     for (int i = 0; i < m_networklinks.size(); i++) {
         link_type type = m_networklinks[i]->getType();
@@ -580,6 +614,11 @@ GarnetNetwork::collateStats()
     for (int i = 0; i < m_routers.size(); i++) {
         m_routers[i]->collateStats();
     }
+
+    m_total_cycles.name(name() + ".total_cycles")
+    .unit(statistics::units::Cycle::get());
+    m_total_cycles = cycle_delta;
+
 }
 
 void
diff --git a/src/mem/ruby/network/garnet/GarnetNetwork.hh b/src/mem/ruby/network/garnet/GarnetNetwork.hh
index db37628bea..71c04e259d 100644
--- a/src/mem/ruby/network/garnet/GarnetNetwork.hh
+++ b/src/mem/ruby/network/garnet/GarnetNetwork.hh
@@ -75,6 +75,10 @@ class GarnetNetwork : public Network
     int getNumRows() const { return m_num_rows; }
     int getNumCols() { return m_num_cols; }
 
+    // for torus
+    int getNumDim() const { return m_num_dim; }
+    int getNumAry() const { return m_num_ary; }
+
     // for network
     uint32_t getNiFlitSize() const { return m_ni_flit_size; }
     uint32_t getBuffersPerDataVC() { return m_buffers_per_data_vc; }
@@ -161,6 +165,10 @@ class GarnetNetwork : public Network
     // Configuration
     int m_num_rows;
     int m_num_cols;
+    // for torus.
+    int m_num_dim;
+    int m_num_ary;
+
     uint32_t m_ni_flit_size;
     uint32_t m_max_vcs_per_vnet;
     uint32_t m_buffers_per_ctrl_vc;
@@ -203,6 +211,9 @@ class GarnetNetwork : public Network
     std::vector<std::vector<statistics::Scalar *>> m_data_traffic_distribution;
     std::vector<std::vector<statistics::Scalar *>> m_ctrl_traffic_distribution;
 
+    statistics::Scalar m_total_cycles;
+    statistics::Formula m_reception_rate;
+
   private:
     GarnetNetwork(const GarnetNetwork& obj);
     GarnetNetwork& operator=(const GarnetNetwork& obj);
diff --git a/src/mem/ruby/network/garnet/GarnetNetwork.py b/src/mem/ruby/network/garnet/GarnetNetwork.py
index 128118309c..c97dad30fb 100644
--- a/src/mem/ruby/network/garnet/GarnetNetwork.py
+++ b/src/mem/ruby/network/garnet/GarnetNetwork.py
@@ -40,9 +40,12 @@ class GarnetNetwork(RubyNetwork):
     cxx_header = "mem/ruby/network/garnet/GarnetNetwork.hh"
     cxx_class = "gem5::ruby::garnet::GarnetNetwork"
 
+    num_dim = Param.Int(2, "number of dimensions if torus topology")
+    num_ary = Param.Int(2, "number of ary if torus topology")
     num_rows = Param.Int(0, "number of rows if 2D (mesh/torus/..) topology")
     ni_flit_size = Param.UInt32(16, "network interface flit size in bytes")
     vcs_per_vnet = Param.UInt32(4, "virtual channels per virtual network")
+    num_star_channel = Param.UInt32(1, "num star channel for hypercube")
     buffers_per_data_vc = Param.UInt32(4, "buffers per data virtual channel")
     buffers_per_ctrl_vc = Param.UInt32(1, "buffers per ctrl virtual channel")
     routing_algorithm = Param.Int(0, "0: Weight-based Table, 1: XY, 2: Custom")
@@ -62,6 +65,9 @@ class GarnetNetworkInterface(ClockedObject):
     vcs_per_vnet = Param.UInt32(
         Parent.vcs_per_vnet, "virtual channels per virtual network"
     )
+    num_star_channel = Param.UInt32(
+        Parent.num_star_channel, "num star channel for hypercube"
+    )
     virt_nets = Param.UInt32(
         Parent.number_of_virtual_networks, "number of virtual networks"
     )
@@ -77,6 +83,9 @@ class GarnetRouter(BasicRouter):
     vcs_per_vnet = Param.UInt32(
         Parent.vcs_per_vnet, "virtual channels per virtual network"
     )
+    num_star_channel = Param.UInt32(
+        Parent.num_star_channel, "num star channel for hypercube"
+    )
     virt_nets = Param.UInt32(
         Parent.number_of_virtual_networks, "number of virtual networks"
     )
diff --git a/src/mem/ruby/network/garnet/InputUnit.cc b/src/mem/ruby/network/garnet/InputUnit.cc
index 179bb642b7..5e7baea4d8 100644
--- a/src/mem/ruby/network/garnet/InputUnit.cc
+++ b/src/mem/ruby/network/garnet/InputUnit.cc
@@ -94,13 +94,40 @@ InputUnit::wakeup()
             set_vc_active(vc, curTick());
 
             // Route computation for this vc
-            int outport = m_router->route_compute(t_flit->get_route(),
-                m_id, m_direction);
-
-            // Update output port in VC
-            // All flits in this packet will use this output port
-            // The output port field in the flit is updated after it wins SA
-            grant_outport(vc, outport);
+            RoutingAlgorithm routing_algorithm =
+                (RoutingAlgorithm) m_router->get_net_ptr()->getRoutingAlgorithm();
+            if (routing_algorithm != CUSTOM_ && routing_algorithm != DOR_ && routing_algorithm != RANDOM_DIMENSION_ && routing_algorithm != STAR_CHANNEL_){
+                int outport = m_router->route_compute(t_flit->get_route(),
+                    m_id, m_direction);
+                // Update output port in VC
+                // All flits in this packet will use this output port
+                // The output port field in the flit is updated after it wins SA
+                grant_outport(vc, outport);
+            }
+            else if (routing_algorithm == STAR_CHANNEL_){
+                // auto [outport, auto[star, is_wrapped]] 
+                puts("!!!!!!!!!!!!!!!!!!!!!!!!!");
+                std::pair<int, std::pair<Star_type, bool > > result= m_router->route_compute_star(t_flit->get_route(),
+                m_id, m_direction, t_flit->get_vc());
+                int outport = result.first; Star_type star = result.second.first; bool is_wrapped = result.second.second;
+                grant_outport(vc, outport);
+                grant_star(vc,star);
+                if(!is_wrapped)grant_is_wrapped(vc,-1); // 不是
+                else{
+                    std::stringstream ss(m_router->getRoutingUnit()->m_outports_idx2dirn[outport]);
+                    std::string prefix;
+                    int dim;
+                    ss >> prefix; // 读取 "plus" 或 "minus"
+                    ss >> dim; // 读取数字部分
+                    grant_is_wrapped(vc,dim);
+                }
+            }
+            else{
+                auto [outport, dor] = m_router->route_compute_dor(t_flit->get_route(),
+                m_id, m_direction, t_flit->get_vc());
+                grant_outport(vc, outport);
+                grant_dor(vc, dor);
+            }
 
         } else {
             assert(virtualChannels[vc].get_state() == ACTIVE_);
diff --git a/src/mem/ruby/network/garnet/InputUnit.hh b/src/mem/ruby/network/garnet/InputUnit.hh
index 4c4baeb03e..5ec5d7f16a 100644
--- a/src/mem/ruby/network/garnet/InputUnit.hh
+++ b/src/mem/ruby/network/garnet/InputUnit.hh
@@ -80,6 +80,24 @@ class InputUnit : public Consumer
     {
         virtualChannels[vc].set_outport(outport);
     }
+    
+    //modified
+    inline void
+    grant_dor(int vc, Dor_type dor)
+    {
+        virtualChannels[vc].set_dor(dor);
+    }
+
+    inline void
+    grant_star(int vc, Star_type star){
+        // std::cout<<star<<std::endl;
+        virtualChannels[vc].set_star(star);
+    }
+
+    inline void
+    grant_is_wrapped(int vc, int is_wrapped){
+        virtualChannels[vc].set_is_wrapped(is_wrapped);
+    }
 
     inline void
     grant_outvc(int vc, int outvc)
@@ -93,6 +111,23 @@ class InputUnit : public Consumer
         return virtualChannels[invc].get_outport();
     }
 
+    //modified
+    inline Dor_type
+    get_dor(int invc)
+    {
+        return virtualChannels[invc].get_dor();
+    }
+
+    inline Star_type
+    get_star(int invc)
+    {
+        return virtualChannels[invc].get_star();
+    }
+
+    inline bool get_is_wrapped(int invc){
+        return virtualChannels[invc].get_is_wrapped();
+    }
+
     inline int
     get_outvc(int invc)
     {
diff --git a/src/mem/ruby/network/garnet/NetworkInterface.cc b/src/mem/ruby/network/garnet/NetworkInterface.cc
index 31d625c4d5..bfc7ecf2c6 100644
--- a/src/mem/ruby/network/garnet/NetworkInterface.cc
+++ b/src/mem/ruby/network/garnet/NetworkInterface.cc
@@ -433,6 +433,7 @@ NetworkInterface::flitisizeMessage(MsgPtr msg_ptr, int vnet)
         // initialize hops_traversed to -1
         // so that the first router increments it to 0
         route.hops_traversed = -1;
+        route.have_wrapped.clear();
 
         m_net_ptr->increment_injected_packets(vnet);
         m_net_ptr->update_traffic_distribution(route);
diff --git a/src/mem/ruby/network/garnet/NetworkInterface.hh b/src/mem/ruby/network/garnet/NetworkInterface.hh
index d42db5ee2a..7647653702 100644
--- a/src/mem/ruby/network/garnet/NetworkInterface.hh
+++ b/src/mem/ruby/network/garnet/NetworkInterface.hh
@@ -273,6 +273,7 @@ class NetworkInterface : public ClockedObject, public Consumer
     const NodeID m_id;
     const int m_virtual_networks;
     int m_vc_per_vnet;
+    int m_num_star_channel;
     std::vector<int> m_vc_allocator;
     std::vector<OutputPort *> outPorts;
     std::vector<InputPort *> inPorts;
diff --git a/src/mem/ruby/network/garnet/OutputUnit.cc b/src/mem/ruby/network/garnet/OutputUnit.cc
index d5ad75327c..45cf5c6998 100644
--- a/src/mem/ruby/network/garnet/OutputUnit.cc
+++ b/src/mem/ruby/network/garnet/OutputUnit.cc
@@ -51,6 +51,7 @@ OutputUnit::OutputUnit(int id, PortDirection direction, Router *router,
   : Consumer(router), m_router(router), m_id(id), m_direction(direction),
     m_vc_per_vnet(consumerVcs)
 {
+    m_num_star_channel = m_router->get_num_star_channel();//希望是对的。
     const int m_num_vcs = consumerVcs * m_router->get_num_vnets();
     outVcState.reserve(m_num_vcs);
     for (int i = 0; i < m_num_vcs; i++) {
@@ -106,6 +107,95 @@ OutputUnit::has_free_vc(int vnet)
     return false;
 }
 
+bool
+OutputUnit::has_free_vc_dor(int vnet, Dor_type dor)
+{
+    int vc_base = vnet*m_vc_per_vnet;
+
+
+    // Vc0 for starplus, vc1 for starminus, vc3-vcn for all, arbitary for device
+    
+    switch(dor){
+        case Dor_type::STARPLUS_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                // if (vc == vc_base+1) continue;
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+
+        case Dor_type::STARMINUS_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+
+        case Dor_type::COMMON_:
+            // for (int vc = vc_base+1; vc < vc_base + m_vc_per_vnet; vc++) {
+            for (int vc = vc_base+m_num_star_channel; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+
+        case Dor_type::DEVICE_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+        default:
+            panic("Invalid dor type\n");
+    }
+
+    return false;
+}
+
+bool
+OutputUnit::has_free_vc_star(int vnet, Star_type star)
+{
+    int vc_base = vnet*m_vc_per_vnet;
+    assert(m_vc_per_vnet >= 2);
+
+
+    // Vc0 for star0, vc1 for star1, vc2-vcn for nonstar, arbitary for device
+    
+    switch(star){
+        case Star_type::STAR0_:
+            for (int vc = vc_base; vc < vc_base+m_num_star_channel; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+
+        case Star_type::STAR1_:
+            for (int vc = vc_base+m_num_star_channel; vc < vc_base+2*m_num_star_channel; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+
+        case Star_type::NONSTAR_:
+            for (int vc = vc_base+2*m_num_star_channel; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+        case Star_type::STARDEVICE_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick()))
+                    return true;
+            }
+            break;
+        default:
+            // std::cout<<Star_type::STAR0_<<' '<<Star_type::STAR1_<<' '<<Star_type::NONSTAR_<<' '<<Star_type::STARDEVICE_<<' '<<star<<std::endl;
+            panic("Invalid star type\n");
+    }
+
+    return false;
+}
+
 // Assign a free output VC to the winner of Switch Allocation
 int
 OutputUnit::select_free_vc(int vnet)
@@ -121,6 +211,109 @@ OutputUnit::select_free_vc(int vnet)
     return -1;
 }
 
+int
+OutputUnit::select_free_vc_dor(int vnet, Dor_type dor)
+{
+    int vc_base = vnet*m_vc_per_vnet;
+    
+    // Vc0 for starplus, vc1 for starminus, vc3-vcn for all, arbitary for device
+    switch(dor){
+        case Dor_type::STARPLUS_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                // if (vc == vc_base+1) continue;
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Dor_type::STARMINUS_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Dor_type::COMMON_:
+            // for (int vc = vc_base+1; vc < vc_base + m_vc_per_vnet; vc++) {
+            for (int vc = vc_base+m_num_star_channel; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Dor_type::DEVICE_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+        default:
+            panic("Invalid dor type\n");
+    }
+
+    return -1;
+}
+
+int
+OutputUnit::select_free_vc_star(int vnet, Star_type star)
+{
+    int vc_base = vnet*m_vc_per_vnet;
+    assert(m_vc_per_vnet >= 2);
+
+    // Vc0 for starplus, vc1 for starminus, vc3-vcn for all, arbitary for device
+    switch(star){
+        case Star_type::STAR0_:
+            for (int vc = vc_base; vc < vc_base+m_num_star_channel; vc++) {
+                // if (vc == vc_base+1) continue;
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Star_type::STAR1_:
+            for (int vc = vc_base+m_num_star_channel; vc < vc_base+2*m_num_star_channel; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Star_type::NONSTAR_:
+            for (int vc = vc_base+2*m_num_star_channel; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        case Star_type::STARDEVICE_:
+            for (int vc = vc_base; vc < vc_base + m_vc_per_vnet; vc++) {
+                if (is_vc_idle(vc, curTick())) {
+                    outVcState[vc].setState(ACTIVE_, curTick());
+                    return vc;
+                }
+            }
+            break;
+
+        default:
+            panic("Invalid dor type\n");
+    }
+
+    return -1;
+}
+
 /*
  * The wakeup function of the OutputUnit reads the credit signal from the
  * downstream router for the output VC (i.e., input VC at downstream router).
diff --git a/src/mem/ruby/network/garnet/OutputUnit.hh b/src/mem/ruby/network/garnet/OutputUnit.hh
index b07035c43a..8e319928fb 100644
--- a/src/mem/ruby/network/garnet/OutputUnit.hh
+++ b/src/mem/ruby/network/garnet/OutputUnit.hh
@@ -68,7 +68,11 @@ class OutputUnit : public Consumer
     void increment_credit(int out_vc);
     bool has_credit(int out_vc);
     bool has_free_vc(int vnet);
+    bool has_free_vc_dor(int vnet, Dor_type dor);
+    bool has_free_vc_star(int vnet, Star_type star);
     int select_free_vc(int vnet);
+    int select_free_vc_dor(int vnet, Dor_type dor);
+    int select_free_vc_star(int vnet, Star_type star);
 
     inline PortDirection get_direction() { return m_direction; }
 
@@ -107,11 +111,23 @@ class OutputUnit : public Consumer
     bool functionalRead(Packet *pkt, WriteMask &mask);
     uint32_t functionalWrite(Packet *pkt);
 
+    //modified
+    void set_vc_used(int vc, bool used){
+        outVcUsed[vc] = used;
+    }
+    bool is_vc_used(int vc){
+        if (outVcUsed.find(vc) == outVcUsed.end()){
+            outVcUsed[vc] = false;
+        }
+        return outVcUsed[vc];
+    }
+
   private:
     Router *m_router;
     GEM5_CLASS_VAR_USED int m_id;
     PortDirection m_direction;
     int m_vc_per_vnet;
+    int m_num_star_channel;
     NetworkLink *m_out_link;
     CreditLink *m_credit_link;
 
@@ -119,6 +135,8 @@ class OutputUnit : public Consumer
     flitBuffer outBuffer;
     // vc state of downstream router
     std::vector<OutVcState> outVcState;
+    //modified
+    std::map<int, bool> outVcUsed;
 };
 
 } // namespace garnet
diff --git a/src/mem/ruby/network/garnet/Router.cc b/src/mem/ruby/network/garnet/Router.cc
index 5232b91897..24fb396f93 100644
--- a/src/mem/ruby/network/garnet/Router.cc
+++ b/src/mem/ruby/network/garnet/Router.cc
@@ -51,6 +51,7 @@ namespace garnet
 Router::Router(const Params &p)
   : BasicRouter(p), Consumer(this), m_latency(p.latency),
     m_virtual_networks(p.virt_nets), m_vc_per_vnet(p.vcs_per_vnet),
+    m_num_star_channel(p.num_star_channel),
     m_num_vcs(m_virtual_networks * m_vc_per_vnet), m_bit_width(p.width),
     m_network_ptr(nullptr), routingUnit(this), switchAllocator(this),
     crossbarSwitch(this)
@@ -164,6 +165,18 @@ Router::route_compute(RouteInfo route, int inport, PortDirection inport_dirn)
     return routingUnit.outportCompute(route, inport, inport_dirn);
 }
 
+std::pair<int, Dor_type>
+Router::route_compute_dor(RouteInfo route, int inport, PortDirection inport_dirn, int vc)
+{
+    return routingUnit.outportCompute_dor(route, inport, inport_dirn, vc);
+}
+
+std::pair<int, std::pair<Star_type, bool> >
+Router::route_compute_star(RouteInfo route, int inport, PortDirection inport_dirn, int vc)
+{
+    return routingUnit.outportCompute_star(route, inport, inport_dirn, vc);
+}
+
 void
 Router::grant_switch(int inport, flit *t_flit)
 {
diff --git a/src/mem/ruby/network/garnet/Router.hh b/src/mem/ruby/network/garnet/Router.hh
index dbcdda9dbf..d929884eba 100644
--- a/src/mem/ruby/network/garnet/Router.hh
+++ b/src/mem/ruby/network/garnet/Router.hh
@@ -86,6 +86,7 @@ class Router : public BasicRouter, public Consumer
     uint32_t get_num_vcs()       { return m_num_vcs; }
     uint32_t get_num_vnets()     { return m_virtual_networks; }
     uint32_t get_vc_per_vnet()   { return m_vc_per_vnet; }
+    uint32_t get_num_star_channel() {return m_num_star_channel;}
     int get_num_inports()   { return m_input_unit.size(); }
     int get_num_outports()  { return m_output_unit.size(); }
     int get_id()            { return m_id; }
@@ -117,6 +118,8 @@ class Router : public BasicRouter, public Consumer
     PortDirection getInportDirection(int inport);
 
     int route_compute(RouteInfo route, int inport, PortDirection direction);
+    std::pair<int, Dor_type> route_compute_dor(RouteInfo route, int inport, PortDirection direction, int vc);
+    std::pair<int, std::pair< Star_type, bool > > route_compute_star(RouteInfo route, int inport, PortDirection direction, int vc);
     void grant_switch(int inport, flit *t_flit);
     void schedule_wakeup(Cycles time);
 
@@ -141,10 +144,13 @@ class Router : public BasicRouter, public Consumer
 
     bool functionalRead(Packet *pkt, WriteMask &mask);
     uint32_t functionalWrite(Packet *);
+    SwitchAllocator* getSwitchAllocator() { return &switchAllocator; }
+    RoutingUnit* getRoutingUnit() { return &routingUnit; }
 
   private:
     Cycles m_latency;
     uint32_t m_virtual_networks, m_vc_per_vnet, m_num_vcs;
+    uint32_t m_num_star_channel;
     uint32_t m_bit_width;
     GarnetNetwork *m_network_ptr;
 
diff --git a/src/mem/ruby/network/garnet/RoutingUnit.cc b/src/mem/ruby/network/garnet/RoutingUnit.cc
index f6075fb651..80e09bc56f 100644
--- a/src/mem/ruby/network/garnet/RoutingUnit.cc
+++ b/src/mem/ruby/network/garnet/RoutingUnit.cc
@@ -33,7 +33,9 @@
 #include "base/cast.hh"
 #include "base/compiler.hh"
 #include "debug/RubyNetwork.hh"
+#include "debug/RubyResourceStalls.hh"
 #include "mem/ruby/network/garnet/InputUnit.hh"
+#include "mem/ruby/network/garnet/OutputUnit.hh"
 #include "mem/ruby/network/garnet/Router.hh"
 #include "mem/ruby/slicc_interface/Message.hh"
 
@@ -185,6 +187,7 @@ RoutingUnit::outportCompute(RouteInfo route, int inport,
     RoutingAlgorithm routing_algorithm =
         (RoutingAlgorithm) m_router->get_net_ptr()->getRoutingAlgorithm();
 
+    assert(routing_algorithm != CUSTOM_ && routing_algorithm != DOR_ && routing_algorithm != RANDOM_DIMENSION_);
     switch (routing_algorithm) {
         case TABLE_:  outport =
             lookupRoutingTable(route.vnet, route.net_dest); break;
@@ -201,6 +204,76 @@ RoutingUnit::outportCompute(RouteInfo route, int inport,
     return outport;
 }
 
+std::pair<int, Dor_type>
+RoutingUnit::outportCompute_dor(RouteInfo route, int inport,
+                            PortDirection inport_dirn, int invc)
+{
+    int outport = -1;
+    Dor_type Dor;
+
+    if (route.dest_router == m_router->get_id()) {
+
+        // Multiple NIs may be connected to this router,
+        // all with output port direction = "Local"
+        // Get exact outport id from table
+        outport = lookupRoutingTable(route.vnet, route.net_dest);
+        return std::make_pair(outport, DEVICE_);
+    }
+
+    // Routing Algorithm set in GarnetNetwork.py
+    // Can be over-ridden from command line using --routing-algorithm = 1
+    RoutingAlgorithm routing_algorithm =
+        (RoutingAlgorithm) m_router->get_net_ptr()->getRoutingAlgorithm();
+
+    assert(routing_algorithm == CUSTOM_ || routing_algorithm == DOR_ || routing_algorithm == RANDOM_DIMENSION_);
+
+    switch (routing_algorithm) {
+        case TABLE_:  outport =
+            lookupRoutingTable(route.vnet, route.net_dest); break;
+        case XY_:     outport =
+            outportComputeXY(route, inport, inport_dirn); break;
+        // any custom algorithm
+        case CUSTOM_: std::tie(outport, Dor) =
+            outportComputeCustom_dor(route, inport, inport_dirn, invc); break;
+        case DOR_: std::tie(outport, Dor) =
+            outportComputeCustom_trivial_dor(route, inport, inport_dirn, invc); break;
+        case RANDOM_DIMENSION_: std::tie(outport, Dor) =
+            outportComputeCustom_random_dimension(route, inport, inport_dirn, invc); break;
+        default: outport =
+            lookupRoutingTable(route.vnet, route.net_dest); break;
+    }
+
+    assert(outport != -1);
+    return std::make_pair(outport, Dor);
+}
+
+std::pair<int, std::pair<Star_type, bool > >
+RoutingUnit::outportCompute_star(RouteInfo route, int inport,
+                            PortDirection inport_dirn, int invc)
+{
+    int outport = -1;
+    Star_type Star;
+
+    if (route.dest_router == m_router->get_id()) {
+
+        // Multiple NIs may be connected to this router,
+        // all with output port direction = "Local"
+        // Get exact outport id from table
+        outport = lookupRoutingTable(route.vnet, route.net_dest);
+        return std::make_pair(outport, std::make_pair(STARDEVICE_,false));
+    }
+
+    // Routing Algorithm set in GarnetNetwork.py
+    // Can be over-ridden from command line using --routing-algorithm = 1
+    RoutingAlgorithm routing_algorithm =
+        (RoutingAlgorithm) m_router->get_net_ptr()->getRoutingAlgorithm();
+
+    assert(routing_algorithm == STAR_CHANNEL_);
+    std::pair<int, std::pair<Star_type, bool > > result = outportComputeStarChannel_star(route, inport, inport_dirn, invc);
+    assert(result.first != -1);//outport
+    return result;
+}
+
 // XY routing implemented using port directions
 // Only for reference purpose in a Mesh
 // By default Garnet uses the routing table
@@ -267,7 +340,260 @@ RoutingUnit::outportComputeCustom(RouteInfo route,
                                  int inport,
                                  PortDirection inport_dirn)
 {
-    panic("%s placeholder executed", __FUNCTION__);
+
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+
+    int difference = dest_id ^ my_id;
+    int diffence_bit = difference & -difference;
+
+    int outport = 0;
+    while ((diffence_bit & 1) == 0) {
+        diffence_bit >>= 1;
+        outport++;
+    }
+
+    PortDirection outport_dirn = std::to_string(outport);
+    return m_outports_dirn2idx[outport_dirn];
+}
+
+std::pair<int, Dor_type>
+RoutingUnit::outportComputeCustom_dor(RouteInfo route,
+                                 int inport,
+                                 PortDirection inport_dirn, int invc)
+{
+
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+    // int length = log2(m_router->get_net_ptr()->getNumRouters());
+
+    int difference = dest_id ^ my_id;
+    int dor_position = 31 - __builtin_clz(difference);
+
+    int dor = 1 << dor_position;
+
+    bool is_dest_greater = (dest_id & dor) != 0;
+
+    PortDirection dorport_dirn = "msb " + std::to_string(dor_position);
+    int dor_port = m_outports_dirn2idx[dorport_dirn];
+
+    int outport;
+    Dor_type Dor;
+
+    auto switch_allocator = m_router->getSwitchAllocator(); //What's this for?
+    std::vector<int> out_ports;
+
+    for (int i = 0; i < dor_position; i++) {
+
+            //the ith bit must be different of source and destination
+            if ((difference & (1 << i)) == 0) {
+                continue;
+            }
+
+            outport = m_outports_dirn2idx["msb " + std::to_string(i)];
+            //print the key and value of map of m_outports_dirn2idx
+            // for (auto it = m_outports_dirn2idx.begin(); it != m_outports_dirn2idx.end(); ++it) {
+            //     DPRINTF(RubyResourceStalls, "Router %d Listmap: outport %s %d\n", my_id, it->first, it->second);
+            // }
+
+            DPRINTF(RubyResourceStalls, "Insert port to list for use %d corresponding bit %d\n", outport, i);
+            Dor = COMMON_;
+            if (switch_allocator->send_allowed_dor(inport, invc, outport, -1, Dor) && (outport != 0) && !get_outport_used(outport)){
+                out_ports.push_back(outport);
+            }
+    }
+
+    if (out_ports.size() != 0) {
+        //randomly choose one of the available ports
+        outport = out_ports[rand() % out_ports.size()];
+        Dor = COMMON_;
+
+        DPRINTF(RubyResourceStalls, "Use adaptive routing: Router %d: outport %d\n", my_id, outport);
+
+        set_outport_used(outport, true);
+        return std::make_pair(outport, Dor);
+    }
+
+    if (is_dest_greater) {
+        Dor = STARPLUS_;
+    } else {
+        Dor = STARMINUS_;
+    }
+
+
+    DPRINTF(RubyResourceStalls, "Use Dor port:%d outport_dirn %s\n", dor_port, dorport_dirn);
+
+    return std::make_pair(dor_port, Dor);
+}
+
+std::pair<int, Dor_type>
+RoutingUnit::outportComputeCustom_random_dimension(RouteInfo route,
+                                 int inport,
+                                 PortDirection inport_dirn, int invc)
+{
+
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+    // int length = log2(m_router->get_net_ptr()->getNumRouters());
+
+    int difference = dest_id ^ my_id;
+    int dor_position = 31 - __builtin_clz(difference);
+
+    int dor = 1 << dor_position;
+
+    bool is_dest_greater = (dest_id & dor) != 0;
+
+    PortDirection dorport_dirn = "msb " + std::to_string(dor_position);
+    int dor_port = m_outports_dirn2idx[dorport_dirn];
+
+    int outport;
+    Dor_type Dor;
+
+    auto switch_allocator = m_router->getSwitchAllocator();
+    std::vector<int> out_ports;
+    std::vector<int> vacant_out_ports;
+
+    for (int i = 0; i <= dor_position; i++) {
+
+            //the ith bit must be different of source and destination
+            if ((difference & (1 << i)) == 0) {
+                continue;
+            }
+
+            outport = m_outports_dirn2idx["msb " + std::to_string(i)];
+
+            DPRINTF(RubyResourceStalls, "Insert port to list for use %d corresponding bit %d\n", outport, i);
+            Dor = COMMON_;
+            if (switch_allocator->send_allowed_dor(inport, invc, outport, -1, Dor) && (outport != 0) && !get_outport_used(outport)){ // 不判断是否用了
+                vacant_out_ports.push_back(outport);
+            }
+            out_ports.push_back(outport);
+    }
+    assert(out_ports.size() != 0);
+    if (vacant_out_ports.size() != 0) {
+        //randomly choose one of the available ports
+        outport = vacant_out_ports[rand() % vacant_out_ports.size()];
+        Dor = COMMON_;
+
+        DPRINTF(RubyResourceStalls, "Use adaptive routing: Router %d: outport %d\n", my_id, outport);
+        set_outport_used(outport, true);
+        return std::make_pair(outport, Dor);
+    }
+    else{
+        outport = out_ports[rand() % out_ports.size()];
+        Dor = COMMON_;
+        DPRINTF(RubyResourceStalls, "Use adaptive routing: Router %d: outport %d\n", my_id, outport);
+        set_outport_used(outport, true);
+        return std::make_pair(outport, Dor);
+    }
+}
+
+std::pair<int, Dor_type>
+RoutingUnit::outportComputeCustom_trivial_dor(RouteInfo route,
+                                 int inport,
+                                 PortDirection inport_dirn, int invc)
+{
+
+
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+    // int length = log2(m_router->get_net_ptr()->getNumRouters());
+
+    int difference = dest_id ^ my_id;
+    int dor_position = 31 - __builtin_clz(difference);
+
+    int dor = 1 << dor_position;
+
+    bool is_dest_greater = (dest_id & dor) != 0;
+
+    PortDirection dorport_dirn = "msb " + std::to_string(dor_position);
+    int dor_port = m_outports_dirn2idx[dorport_dirn];
+
+    // int outport;
+    Dor_type Dor;
+
+    if (is_dest_greater) {
+        Dor = STARPLUS_;
+    } else {
+        Dor = STARMINUS_;
+    }
+
+    DPRINTF(RubyResourceStalls, "Use Dor port:%d outport_dirn %s\n", dor_port, dorport_dirn);
+
+    return std::make_pair(dor_port, Dor);
+}
+
+std::pair<int, std::pair<Star_type,bool > >// outport, Star, is_wrap //need to modify others
+RoutingUnit::outportComputeStarChannel_star(RouteInfo route,
+                                 int inport,
+                                 PortDirection inport_dirn, int invc)
+{
+    int my_id = m_router->get_id();
+    int dest_id = route.dest_router;
+    int num_dim = m_router->get_net_ptr()->getNumDim();
+    int num_ary = m_router->get_net_ptr()->getNumAry();
+
+    std::vector<int> dir; // minimal direction for dim i. +1: plus. -1: minus; 0: no difference
+    std::vector<int> pw;
+    std::vector<int> digit_my, digit_dest;
+    std::vector<bool> is_wrap; // if it's wrap-around on the i-th dimension 
+    pw.push_back(1);for(int i=1;i<num_dim;i++)pw.push_back(pw.back()*num_ary);
+    for(int i=0;i<num_dim;i++)digit_my.push_back(my_id/pw[i]%num_ary);
+    for(int i=0;i<num_dim;i++)digit_dest.push_back(dest_id/pw[i]%num_ary);
+    int most_sig_diff_bit = -1;
+    for(int i=0;i<num_dim;i++){
+        bool flg_is_wrap = false;
+        if(digit_my[i]<digit_dest[i]){
+            if(digit_dest[i]-digit_my[i]<=num_ary/2){
+                dir.push_back(1);
+            }else{
+                dir.push_back(-1);
+                if(digit_my[i]==0)flg_is_wrap = true;
+            } 
+            most_sig_diff_bit = i;
+        }
+        else if(digit_my[i]>digit_dest[i]){
+            if(digit_my[i]-digit_dest[i]<=num_ary/2){
+                dir.push_back(-1);
+            }else{
+                dir.push_back(1);
+                if(digit_my[i]==num_ary-1)flg_is_wrap = true;
+            }
+            most_sig_diff_bit = i;
+        } else dir.push_back(0); //==
+        is_wrap.push_back(flg_is_wrap);
+    }
+    assert(most_sig_diff_bit>=0);
+
+    auto switch_allocator = m_router->getSwitchAllocator(); //What's this for?
+    std::vector<int> vacant_nonstar_outports;
+    std::vector<bool> vno_iswrap;
+    for(int i = 0; i < num_dim; i++){
+        if(digit_my[i] == digit_dest[i])continue;
+        int outport = (dir[i] == 1) ? m_outports_dirn2idx["plus " + std::to_string(i)] : m_outports_dirn2idx["minus " + std::to_string(i)];
+        DPRINTF(RubyResourceStalls, "Insert port to list for use %d corresponding bit %d\n", outport, i);
+        if (switch_allocator->send_allowed_star(inport, invc, outport, -1, Star_type:: NONSTAR_) && (outport != 0) && !get_outport_used(outport)){
+                vacant_nonstar_outports.push_back(outport);
+                vno_iswrap.push_back(is_wrap[i]);
+            }
+    }
+    if (vacant_nonstar_outports.size() != 0){
+        int idx = rand() % vacant_nonstar_outports.size();
+        int outport = vacant_nonstar_outports[idx];
+        bool is_wrap = vno_iswrap[idx];
+        Star_type Star = NONSTAR_;
+        DPRINTF(RubyResourceStalls, "Use adaptive routing: Router %d: outport %d\n", my_id, outport);
+        set_outport_used(outport, true);
+        return std::make_pair(outport,std::make_pair(Star,is_wrap));
+    }else{//star channel;
+        int i = most_sig_diff_bit;
+        int outport = (dir[i] == 1) ? m_outports_dirn2idx["plus " + std::to_string(i)] : m_outports_dirn2idx["minus " + std::to_string(i)];
+        bool have_wrapped = (route.have_wrapped.find(i) != route.have_wrapped.end());
+        Star_type Star = (have_wrapped | is_wrap[i]) ? STAR1_ : STAR0_;
+        DPRINTF(RubyResourceStalls, "Use Dor port:%d outport_dim %s\n", outport, i);
+        
+        return std::make_pair(outport,std::make_pair(Star,is_wrap[i]));
+    }
 }
 
 } // namespace garnet
diff --git a/src/mem/ruby/network/garnet/RoutingUnit.hh b/src/mem/ruby/network/garnet/RoutingUnit.hh
index e593afd080..85e3e634f5 100644
--- a/src/mem/ruby/network/garnet/RoutingUnit.hh
+++ b/src/mem/ruby/network/garnet/RoutingUnit.hh
@@ -57,6 +57,13 @@ class RoutingUnit
                       int inport,
                       PortDirection inport_dirn);
 
+    std::pair<int, Dor_type> outportCompute_dor(RouteInfo route,
+                      int inport,
+                      PortDirection inport_dirn, int invc);
+    std::pair<int, std::pair< Star_type, bool > > outportCompute_star(RouteInfo route,
+                      int inport,
+                      PortDirection inport_dirn, int invc);
+
     // Topology-agnostic Routing Table based routing (default)
     void addRoute(std::vector<NetDest>& routing_table_entry);
     void addWeight(int link_weight);
@@ -78,11 +85,42 @@ class RoutingUnit
                              int inport,
                              PortDirection inport_dirn);
 
+    std::pair<int, Dor_type> outportComputeCustom_dor(RouteInfo route,
+                             int inport,
+                             PortDirection inport_dirn, int invc);
+
+    std::pair<int, Dor_type> outportComputeCustom_trivial_dor(RouteInfo route,
+                             int inport,
+                             PortDirection inport_dirn, int invc);
+
+    std::pair<int, Dor_type> outportComputeCustom_random_dimension(RouteInfo route,
+                             int inport,
+                             PortDirection inport_dirn, int invc);
+
+    std::pair<int, std::pair<Star_type, bool > > outportComputeStarChannel_star(RouteInfo route,
+                              int inport,
+                              PortDirection inport_dirn, int invc);
+
     // Returns true if vnet is present in the vector
     // of vnets or if the vector supports all vnets.
     bool supportsVnet(int vnet, std::vector<int> sVnets);
 
-
+    //modified
+    void set_outport_used(int outport, bool used){
+        m_outport_used[outport] = used;
+    }
+    bool get_outport_used(int outport){
+      if (m_outport_used.find(outport) == m_outport_used.end()){
+        m_outport_used[outport] = false;
+      }
+        return m_outport_used[outport];
+    }
+  public:
+    // Inport and Outport direction to idx maps
+    std::map<PortDirection, int> m_inports_dirn2idx;
+    std::map<int, PortDirection> m_inports_idx2dirn;
+    std::map<int, PortDirection> m_outports_idx2dirn;
+    std::map<PortDirection, int> m_outports_dirn2idx;
   private:
     Router *m_router;
 
@@ -90,11 +128,9 @@ class RoutingUnit
     std::vector<std::vector<NetDest>> m_routing_table;
     std::vector<int> m_weight_table;
 
-    // Inport and Outport direction to idx maps
-    std::map<PortDirection, int> m_inports_dirn2idx;
-    std::map<int, PortDirection> m_inports_idx2dirn;
-    std::map<int, PortDirection> m_outports_idx2dirn;
-    std::map<PortDirection, int> m_outports_dirn2idx;
+
+    //modified
+    std::map<int, bool>  m_outport_used;
 };
 
 } // namespace garnet
diff --git a/src/mem/ruby/network/garnet/SwitchAllocator.cc b/src/mem/ruby/network/garnet/SwitchAllocator.cc
index e31733d42e..e94d8eaec8 100644
--- a/src/mem/ruby/network/garnet/SwitchAllocator.cc
+++ b/src/mem/ruby/network/garnet/SwitchAllocator.cc
@@ -52,6 +52,7 @@ SwitchAllocator::SwitchAllocator(Router *router)
     m_router = router;
     m_num_vcs = m_router->get_num_vcs();
     m_vc_per_vnet = m_router->get_vc_per_vnet();
+    m_num_star_channel = m_router->get_num_star_channel();
 
     m_input_arbiter_activity = 0;
     m_output_arbiter_activity = 0;
@@ -90,8 +91,28 @@ SwitchAllocator::init()
 void
 SwitchAllocator::wakeup()
 {
-    arbitrate_inports(); // First stage of allocation
-    arbitrate_outports(); // Second stage of allocation
+    RoutingAlgorithm routing_algorithm =
+                (RoutingAlgorithm) m_router->get_net_ptr()->getRoutingAlgorithm();
+    
+    // if (routing_algorithm != CUSTOM_){
+    // arbitrate_inports(); // First stage of allocation
+    // arbitrate_outports(); // Second stage of allocation
+    // }
+
+    // else{
+    // arbitrate_inports_dor(); // First stage of allocation
+    // arbitrate_outports_dor(); // Second stage of allocation
+    // }
+    if (routing_algorithm == CUSTOM_ || routing_algorithm == DOR_ || routing_algorithm == RANDOM_DIMENSION_){
+        arbitrate_inports_dor(); // First stage of allocation
+        arbitrate_outports_dor(); // Second stage of allocation
+    }else if (routing_algorithm == STAR_CHANNEL_){
+        arbitrate_inports_star(); // First stage of allocation
+        arbitrate_outports_star(); // Second stage of allocation
+    }else{
+        arbitrate_inports(); // First stage of allocation
+        arbitrate_outports(); // Second stage of allocation
+    }
 
     clear_request_vector();
     check_for_wakeup();
@@ -145,6 +166,86 @@ SwitchAllocator::arbitrate_inports()
     }
 }
 
+void
+SwitchAllocator::arbitrate_inports_dor()
+{
+    // Select a VC from each input in a round robin manner
+    // Independent arbiter at each input port
+    for (int inport = 0; inport < m_num_inports; inport++) {
+        int invc = m_round_robin_invc[inport];
+
+        for (int invc_iter = 0; invc_iter < m_num_vcs; invc_iter++) {
+            auto input_unit = m_router->getInputUnit(inport);
+
+            if (input_unit->need_stage(invc, SA_, curTick())) {
+                // This flit is in SA stage
+
+                Dor_type dor = input_unit->get_dor(invc);
+
+                int outport = input_unit->get_outport(invc);
+                int outvc = -1;
+
+                // check if the flit in this InputVC is allowed to be sent
+                // send_allowed conditions described in that function.
+                bool make_request =
+                    send_allowed_dor(inport, invc, outport, outvc, dor);
+
+                if (make_request) {
+                    m_input_arbiter_activity++;
+                    m_port_requests[inport] = outport;
+                    m_vc_winners[inport] = invc;
+
+                    break; // got one vc winner for this port
+                }
+            }
+
+            invc++;
+            if (invc >= m_num_vcs)
+                invc = 0;
+        }
+    }
+}
+
+void
+SwitchAllocator::arbitrate_inports_star()
+{
+    // Select a VC from each input in a round robin manner
+    // Independent arbiter at each input port
+    for (int inport = 0; inport < m_num_inports; inport++) {
+        int invc = m_round_robin_invc[inport];
+
+        for (int invc_iter = 0; invc_iter < m_num_vcs; invc_iter++) {
+            auto input_unit = m_router->getInputUnit(inport);
+
+            if (input_unit->need_stage(invc, SA_, curTick())) {
+                // This flit is in SA stage
+
+                Star_type star = input_unit->get_star(invc);
+
+                int outport = input_unit->get_outport(invc);
+                int outvc = -1;
+
+                // check if the flit in this InputVC is allowed to be sent
+                // send_allowed conditions described in that function.
+                bool make_request =
+                    send_allowed_star(inport, invc, outport, outvc, star);
+
+                if (make_request) {
+                    m_input_arbiter_activity++;
+                    m_port_requests[inport] = outport;
+                    m_vc_winners[inport] = invc;
+
+                    break; // got one vc winner for this port
+                }
+            }
+
+            invc++;
+            if (invc >= m_num_vcs)
+                invc = 0;
+        }
+    }
+}
+
 /*
  * SA-II (or SA-o) loops through all output ports,
  * and selects one input VC (that placed a request during SA-I)
@@ -266,6 +367,238 @@ SwitchAllocator::arbitrate_outports()
     }
 }
 
+void
+SwitchAllocator::arbitrate_outports_dor()
+{
+    // Now there are a set of input vc requests for output vcs.
+    // Again do round robin arbitration on these requests
+    // Independent arbiter at each output port
+    for (int outport = 0; outport < m_num_outports; outport++) {
+        int inport = m_round_robin_inport[outport];
+
+        for (int inport_iter = 0; inport_iter < m_num_inports;
+                 inport_iter++) {
+
+            // inport has a request this cycle for outport
+            if (m_port_requests[inport] == outport) {
+                auto output_unit = m_router->getOutputUnit(outport);
+                auto input_unit = m_router->getInputUnit(inport);
+
+                // grant this outport to this inport
+                int invc = m_vc_winners[inport];
+                
+                // modified + dor
+                Dor_type dor = input_unit->get_dor(invc);
+
+                int outvc = input_unit->get_outvc(invc);
+
+                if (outvc == -1) {
+                    // VC Allocation - select any free VC from outport
+                    outvc = vc_allocate_dor(outport, inport, invc, dor);
+                }
+
+                // remove flit from Input VC
+                flit *t_flit = input_unit->getTopFlit(invc);
+
+                DPRINTF(RubyNetwork, "SwitchAllocator at Router %d "
+                                     "granted outvc %d at outport %d "
+                                     "to invc %d at inport %d to flit %s at "
+                                     "cycle: %lld\n",
+                        m_router->get_id(), outvc,
+                        m_router->getPortDirectionName(
+                            output_unit->get_direction()),
+                        invc,
+                        m_router->getPortDirectionName(
+                            input_unit->get_direction()),
+                            *t_flit,
+                        m_router->curCycle());
+
+
+                // Update outport field in the flit since this is
+                // used by CrossbarSwitch code to send it out of
+                // correct outport.
+                // Note: post route compute in InputUnit,
+                // outport is updated in VC, but not in flit
+                t_flit->set_outport(outport);
+
+                // set outvc (i.e., invc for next hop) in flit
+                // (This was updated in VC by vc_allocate, but not in flit)
+                t_flit->set_vc(outvc);
+
+                // decrement credit in outvc
+                // if (output_unit->has_credit(outvc))
+                output_unit->decrement_credit(outvc);
+                
+                auto routing_unit =  m_router->getRoutingUnit();
+                routing_unit->set_outport_used(outport, false);
+
+                // flit ready for Switch Traversal
+                t_flit->advance_stage(ST_, curTick());
+                m_router->grant_switch(inport, t_flit);
+                m_output_arbiter_activity++;
+
+                if ((t_flit->get_type() == TAIL_) ||
+                    t_flit->get_type() == HEAD_TAIL_) {
+
+                    // This Input VC should now be empty
+                    assert(!(input_unit->isReady(invc, curTick())));
+
+                    // Free this VC
+                    input_unit->set_vc_idle(invc, curTick());
+
+                    // Send a credit back
+                    // along with the information that this VC is now idle
+                    input_unit->increment_credit(invc, true, curTick());
+                } else {
+                    // Send a credit back
+                    // but do not indicate that the VC is idle
+                    input_unit->increment_credit(invc, false, curTick());
+                }
+
+                // remove this request
+                m_port_requests[inport] = -1;
+
+                // Update Round Robin pointer
+                m_round_robin_inport[outport] = inport + 1;
+                if (m_round_robin_inport[outport] >= m_num_inports)
+                    m_round_robin_inport[outport] = 0;
+
+                // Update Round Robin pointer to the next VC
+                // We do it here to keep it fair.
+                // Only the VC which got switch traversal
+                // is updated.
+                m_round_robin_invc[inport] = invc + 1;
+                if (m_round_robin_invc[inport] >= m_num_vcs)
+                    m_round_robin_invc[inport] = 0;
+
+
+                break; // got a input winner for this outport
+            }
+
+            inport++;
+            if (inport >= m_num_inports)
+                inport = 0;
+        }
+    }
+}
+
+void
+SwitchAllocator::arbitrate_outports_star()
+{
+    // Now there are a set of input vc requests for output vcs.
+    // Again do round robin arbitration on these requests
+    // Independent arbiter at each output port
+    for (int outport = 0; outport < m_num_outports; outport++) {
+        int inport = m_round_robin_inport[outport];
+
+        for (int inport_iter = 0; inport_iter < m_num_inports;
+                 inport_iter++) {
+
+            // inport has a request this cycle for outport
+            if (m_port_requests[inport] == outport) {
+                auto output_unit = m_router->getOutputUnit(outport);
+                auto input_unit = m_router->getInputUnit(inport);
+
+                // grant this outport to this inport
+                int invc = m_vc_winners[inport];
+                
+                // modified + star
+                Star_type star = input_unit->get_star(invc);//要确认自己理解得对不对，是不是要加个grant
+                int is_wrapped = input_unit->get_is_wrapped(invc);//todo; we need to encode it into 
+
+                int outvc = input_unit->get_outvc(invc);
+
+                if (outvc == -1) {
+                    // VC Allocation - select any free VC from outport
+                    outvc = vc_allocate_star(outport, inport, invc, star);
+                }
+
+                // remove flit from Input VC
+                flit *t_flit = input_unit->getTopFlit(invc);
+
+                DPRINTF(RubyNetwork, "SwitchAllocator at Router %d "
+                                     "granted outvc %d at outport %d "
+                                     "to invc %d at inport %d to flit %s at "
+                                     "cycle: %lld\n",
+                        m_router->get_id(), outvc,
+                        m_router->getPortDirectionName(
+                            output_unit->get_direction()),
+                        invc,
+                        m_router->getPortDirectionName(
+                            input_unit->get_direction()),
+                            *t_flit,
+                        m_router->curCycle());
+
+
+                // Update outport field in the flit since this is
+                // used by CrossbarSwitch code to send it out of
+                // correct outport.
+                // Note: post route compute in InputUnit,
+                // outport is updated in VC, but not in flit
+                t_flit->set_outport(outport);
+
+                // set outvc (i.e., invc for next hop) in flit
+                // (This was updated in VC by vc_allocate, but not in flit)
+                t_flit->set_vc(outvc);
+                if(is_wrapped != -1)t_flit->set_is_wrapped(is_wrapped);//淦，不知道维度，不能用bool
+
+                // decrement credit in outvc
+                // if (output_unit->has_credit(outvc))
+                output_unit->decrement_credit(outvc);
+                
+                auto routing_unit =  m_router->getRoutingUnit();
+                routing_unit->set_outport_used(outport, false);
+
+                // flit ready for Switch Traversal
+                t_flit->advance_stage(ST_, curTick());
+                m_router->grant_switch(inport, t_flit);
+                m_output_arbiter_activity++;
+
+                if ((t_flit->get_type() == TAIL_) ||
+                    t_flit->get_type() == HEAD_TAIL_) {
+
+                    // This Input VC should now be empty
+                    assert(!(input_unit->isReady(invc, curTick())));
+
+                    // Free this VC
+                    input_unit->set_vc_idle(invc, curTick());
+
+                    // Send a credit back
+                    // along with the information that this VC is now idle
+                    input_unit->increment_credit(invc, true, curTick());
+                } else {
+                    // Send a credit back
+                    // but do not indicate that the VC is idle
+                    input_unit->increment_credit(invc, false, curTick());
+                }
+
+                // remove this request
+                m_port_requests[inport] = -1;
+
+                // Update Round Robin pointer
+                m_round_robin_inport[outport] = inport + 1;
+                if (m_round_robin_inport[outport] >= m_num_inports)
+                    m_round_robin_inport[outport] = 0;
+
+                // Update Round Robin pointer to the next VC
+                // We do it here to keep it fair.
+                // Only the VC which got switch traversal
+                // is updated.
+                m_round_robin_invc[inport] = invc + 1;
+                if (m_round_robin_invc[inport] >= m_num_vcs)
+                    m_round_robin_invc[inport] = 0;
+
+
+                break; // got a input winner for this outport
+            }
+
+            inport++;
+            if (inport >= m_num_inports)
+                inport = 0;
+        }
+    }
+}
+
 /*
  * A flit can be sent only if
  * (1) there is at least one free output VC at the
@@ -337,6 +670,201 @@ SwitchAllocator::send_allowed(int inport, int invc, int outport, int outvc)
     return true;
 }
 
+bool
+SwitchAllocator::send_allowed_dor(int inport, int invc, int outport, int outvc, Dor_type dor)
+{
+    // Check if outvc needed
+    // Check if credit needed (for multi-flit packet)
+    // Check if ordering violated (in ordered vnet)
+
+    int vnet = get_vnet(invc);
+    bool has_outvc = (outvc != -1);
+    bool has_credit = false;
+
+    auto output_unit = m_router->getOutputUnit(outport);
+    if (!has_outvc) {
+
+        // needs outvc
+        // this is only true for HEAD and HEAD_TAIL flits.
+
+        if (output_unit->has_free_vc_dor(vnet, dor)) {
+
+            has_outvc = true;
+
+            // each VC has at least one buffer,
+            // so no need for additional credit check
+            has_credit = true;
+        }
+    } else {
+        has_credit = output_unit->has_credit(outvc);
+    }
+
+    // cannot send if no outvc or no credit.
+    if (!has_outvc || !has_credit)
+        return false;
+
+
+    // protocol ordering check
+    if ((m_router->get_net_ptr())->isVNetOrdered(vnet)) {
+        auto input_unit = m_router->getInputUnit(inport);
+
+        // enqueue time of this flit
+        Tick t_enqueue_time = input_unit->get_enqueue_time(invc);
+
+        // check if any other flit is ready for SA and for same output port
+        // and was enqueued before this flit
+        int vc_base = vnet*m_vc_per_vnet;
+
+        // Vc0 for starplus, vc1 for starminus, vc3-vcn for all, arbitary for device
+        switch(dor){
+            case Dor_type::STARPLUS_:
+                for (int vc_offset = 0; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    // if (vc_offset == 1) continue;
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Dor_type::STARMINUS_:
+                for (int vc_offset = 0; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Dor_type::COMMON_:
+                // for (int vc_offset = 1; vc_offset < m_vc_per_vnet; vc_offset++) {
+                for (int vc_offset = m_num_star_channel; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Dor_type::DEVICE_:
+                for (int vc_offset = 0; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            default:
+                panic("Invalid dor type\n");
+        }
+    }
+
+    return true;
+}
+
+bool
+SwitchAllocator::send_allowed_star(int inport, int invc, int outport, int outvc, Star_type star)
+{
+    // Check if outvc needed
+    // Check if credit needed (for multi-flit packet)
+    // Check if ordering violated (in ordered vnet)
+
+    int vnet = get_vnet(invc);
+    bool has_outvc = (outvc != -1);
+    bool has_credit = false;
+
+    auto output_unit = m_router->getOutputUnit(outport);
+    if (!has_outvc) {
+
+        // needs outvc
+        // this is only true for HEAD and HEAD_TAIL flits.
+
+        if (output_unit->has_free_vc_star(vnet, star)) {
+
+            has_outvc = true;
+
+            // each VC has at least one buffer,
+            // so no need for additional credit check
+            has_credit = true;
+        }
+    } else {
+        has_credit = output_unit->has_credit(outvc);
+    }
+
+    // cannot send if no outvc or no credit.
+    if (!has_outvc || !has_credit)
+        return false;
+
+
+    // protocol ordering check
+    if ((m_router->get_net_ptr())->isVNetOrdered(vnet)) {
+        auto input_unit = m_router->getInputUnit(inport);
+
+        // enqueue time of this flit
+        Tick t_enqueue_time = input_unit->get_enqueue_time(invc);
+
+        // check if any other flit is ready for SA and for same output port
+        // and was enqueued before this flit
+        int vc_base = vnet*m_vc_per_vnet;
+
+        // Vc0 for starplus, vc1 for starminus, vc3-vcn for all, arbitary for device
+        assert(m_vc_per_vnet>=2);
+        switch(star){
+            case Star_type::STAR0_:
+                for (int vc_offset = 0; vc_offset < m_num_star_channel; vc_offset++) {
+                    // if (vc_offset == 1) continue;
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Star_type::STAR1_:
+                for (int vc_offset = m_num_star_channel; vc_offset < 2*m_num_star_channel; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Star_type::NONSTAR_:
+                for (int vc_offset = 2*m_num_star_channel; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            case Star_type::STARDEVICE_:
+                for (int vc_offset = 0; vc_offset < m_vc_per_vnet; vc_offset++) {
+                    int temp_vc = vc_base + vc_offset;
+                    if (input_unit->need_stage(temp_vc, SA_, curTick()) &&
+                    (input_unit->get_outport(temp_vc) == outport) &&
+                    (input_unit->get_enqueue_time(temp_vc) < t_enqueue_time)) {
+                        return false;
+                    }
+                }
+                break;
+            default:
+                panic("Invalid star type\n");
+        }
+    }
+
+    return true;
+}
+
+
 // Assign a free VC to the winner of the output port.
 int
 SwitchAllocator::vc_allocate(int outport, int inport, int invc)
@@ -351,6 +879,32 @@ SwitchAllocator::vc_allocate(int outport, int inport, int invc)
     return outvc;
 }
 
+int
+SwitchAllocator::vc_allocate_dor(int outport, int inport, int invc, Dor_type dor)
+{
+    // Select a free VC from the output port
+    int outvc =
+        m_router->getOutputUnit(outport)->select_free_vc_dor(get_vnet(invc), dor);
+
+    // has to get a valid VC since it checked before performing SA
+    // assert(outvc != -1);
+    m_router->getInputUnit(inport)->grant_outvc(invc, outvc);
+    return outvc;
+}
+
+int
+SwitchAllocator::vc_allocate_star(int outport, int inport, int invc, Star_type star)
+{
+    // Select a free VC from the output port
+    int outvc =
+        m_router->getOutputUnit(outport)->select_free_vc_star(get_vnet(invc), star);
+
+    // has to get a valid VC since it checked before performing SA
+    // assert(outvc != -1);
+    m_router->getInputUnit(inport)->grant_outvc(invc, outvc);
+    return outvc;
+}
+
 // Wakeup the router next cycle to perform SA again
 // if there are flits ready.
 void
diff --git a/src/mem/ruby/network/garnet/SwitchAllocator.hh b/src/mem/ruby/network/garnet/SwitchAllocator.hh
index 1072e0ad12..3051c85cd6 100644
--- a/src/mem/ruby/network/garnet/SwitchAllocator.hh
+++ b/src/mem/ruby/network/garnet/SwitchAllocator.hh
@@ -63,8 +63,16 @@ class SwitchAllocator : public Consumer
     void print(std::ostream& out) const {};
     void arbitrate_inports();
     void arbitrate_outports();
+    void arbitrate_inports_dor();
+    void arbitrate_outports_dor();
+    void arbitrate_inports_star();
+    void arbitrate_outports_star();
     bool send_allowed(int inport, int invc, int outport, int outvc);
+    bool send_allowed_dor(int inport, int invc, int outport, int outvc, Dor_type dor);
+    bool send_allowed_star(int inport, int invc, int outport, int outvc, Star_type star);
     int vc_allocate(int outport, int inport, int invc);
+    int vc_allocate_dor(int outport, int inport, int invc, Dor_type dor);
+    int vc_allocate_star(int outport, int inport, int invc, Star_type star);
 
     inline double
     get_input_arbiter_activity()
@@ -82,6 +90,7 @@ class SwitchAllocator : public Consumer
   private:
     int m_num_inports, m_num_outports;
     int m_num_vcs, m_vc_per_vnet;
+    int m_num_star_channel;
 
     double m_input_arbiter_activity, m_output_arbiter_activity;
 
diff --git a/src/mem/ruby/network/garnet/VirtualChannel.hh b/src/mem/ruby/network/garnet/VirtualChannel.hh
index 04b046b697..585e020b83 100644
--- a/src/mem/ruby/network/garnet/VirtualChannel.hh
+++ b/src/mem/ruby/network/garnet/VirtualChannel.hh
@@ -59,6 +59,13 @@ class VirtualChannel
     inline int get_outvc()                  { return m_output_vc; }
     void set_outport(int outport)           { m_output_port = outport; };
     inline int get_outport()                  { return m_output_port; }
+    //modified
+    void set_dor(Dor_type dor)           { m_dor = dor; }
+    void set_star(Star_type star)          {m_star = star;}
+    void set_is_wrapped(bool is_wrapped)   {m_is_wrapped = is_wrapped;}
+    inline Dor_type get_dor()                   { return m_dor; }
+    inline Star_type get_star()          {return m_star;}
+    inline bool get_is_wrapped()         {return m_is_wrapped;}
 
     inline Tick get_enqueue_time()          { return m_enqueue_time; }
     inline void set_enqueue_time(Tick time) { m_enqueue_time = time; }
@@ -104,6 +111,10 @@ class VirtualChannel
     int m_output_port;
     Tick m_enqueue_time;
     int m_output_vc;
+    // modified
+    Dor_type m_dor;
+    Star_type m_star;
+    bool m_is_wrapped;
 };
 
 } // namespace garnet
diff --git a/src/mem/ruby/network/garnet/flit.hh b/src/mem/ruby/network/garnet/flit.hh
index a52d7416ae..dbe586bd80 100644
--- a/src/mem/ruby/network/garnet/flit.hh
+++ b/src/mem/ruby/network/garnet/flit.hh
@@ -74,6 +74,7 @@ class flit
     void set_outport(int port) { m_outport = port; }
     void set_time(Tick time) { m_time = time; }
     void set_vc(int vc) { m_vc = vc; }
+    void set_is_wrapped(int dim) {m_route.have_wrapped.insert(dim);}
     void set_route(RouteInfo route) { m_route = route; }
     void set_src_delay(Tick delay) { src_delay = delay; }
     void set_dequeue_time(Tick time) { m_dequeue_time = time; }
diff --git a/src/mem/ruby/network/garnet/flitBuffer.hh b/src/mem/ruby/network/garnet/flitBuffer.hh
index 089c931951..ee98c4e37a 100644
--- a/src/mem/ruby/network/garnet/flitBuffer.hh
+++ b/src/mem/ruby/network/garnet/flitBuffer.hh
@@ -63,6 +63,7 @@ class flitBuffer
     flit *
     getTopFlit()
     {
+        assert(!isEmpty());
         flit *f = m_buffer.front();
         m_buffer.pop_front();
         return f;
@@ -71,6 +72,7 @@ class flitBuffer
     flit *
     peekTopFlit()
     {
+        assert(!isEmpty());
         return m_buffer.front();
     }
 
